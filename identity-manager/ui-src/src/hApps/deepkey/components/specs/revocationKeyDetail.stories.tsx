import * as React from 'react'
import { Provider } from 'react-redux'
import { MemoryRouter } from 'react-router-dom'
import { storiesOf } from '@storybook/react'
// import { action } from '@storybook/addon-actions'
// import { specs } from 'storybook-addon-specifications'
// import { deepKeyTests } from './deepKey.test'
import deepKeyNotInitNotes from './deepKeyNotInitNotes.md'
import deepKeyInitNoKeysNotes from './deepKeyInitNoKeysNotes.md'
import deepKeyInitKeysNotes from './deepKeyInitKeysNotes\.md'

// import deepKeyInitNotes from './deepKeyInitNotes.md'

import CreateStore from '../../../../store'
import RevocationKeyDetail, { Props } from '../revocationKeyDetail'
import { RevocationRuleSet, Authorizer, KeyMeta, KeyType } from '../../types/deepKey' // , RevParams, AuthParams

let store = CreateStore()

const mockRule: RevocationRuleSet = {
  keysetRoot: 'QmKeySetHash',
  revocationKey: 'QmRevocationKeyHash',
  priorRevocationSelfSig: null
}

const mockAuthorizer: Authorizer = {
  authorizationKey: 'QmAuthKeyHash',
  revocationAuthority: 'QmRevocationAuthorityHash',
  revocationSig: 'QmMockRevocationKeySignatureofAuthKey'
}

const keyMetaMockData: KeyMeta = {
  newKey: 'QmMockNewKeyHash',
  derivationIndex: 1,
  keyType: KeyType.AppSig, // enum vlaue
  context: 'QmMockHcDNAHash'
}

// const setMockAuthUpdateArgs: AuthParams = {
//   authorizationKeyPath: 1,
//   signedAuthKey:'QmAuthKeyMockHash'
// }

// const revRulesParams: RevParams = {
//   revocationKey: 'QmRevocationKeyMockHash',
//   signedOldRevocationKey: 'HCSprevSignedKeyHash'
// }

let props: Props = {
  revocationRuleSet: {
    keysetRoot: 'QmKeySetHash',
    revocationKey: 'QmRevocationKeyHash'
  },
  updateRevocationRules: jest.fn(() => Promise.resolve(''))
}

storiesOf('Revocation Key Detail', module)
// 1. Init (with revocationKey that is pre-generated by Agent, and added to the Conductor)
  .add('Initialized, with Revocation Key', () => {
    // specs(() => personaListTests)
    props = {
      ...props,
      revocationRuleSet: {
        keysetRoot: 'QmKeySetHash',
        revocationKey: 'QmRevocationKeyHash'
      }
    }
    return getRevocationKeyDetail()
  },
  {
    notes: { markdown: deepKeyInitKeysNotes }
  })

function getRevocationKeyDetail () {
  return (
    <Provider store={store}>
      <MemoryRouter initialEntries={['/']}>
        <RevocationKeyDetail {...props}/>
      </MemoryRouter>
    </Provider>)
}
