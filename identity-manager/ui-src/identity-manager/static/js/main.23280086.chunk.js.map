{"version":3,"sources":["theme.tsx","withRoot.tsx","hApps/login/components/login.tsx","hApps/login/actions.ts","hApps/login/containers/loginContainer.ts","hApps/personas-profiles/components/persona/personas.tsx","hApps/personas-profiles/actions.ts","hApps/personas-profiles/containers/personasContainer.ts","hApps/personas-profiles/components/persona/persona.tsx","hApps/personas-profiles/types/profile.ts","hApps/personas-profiles/containers/personaContainer.ts","hApps/personas-profiles/components/profile/autoCompleteProfileField.tsx","hApps/personas-profiles/components/profile/fieldMapper.tsx","hApps/personas-profiles/components/profile/profile.tsx","hApps/personas-profiles/containers/profileContainer.ts","hApps/personas-profiles/components/profile/profiles.tsx","hApps/personas-profiles/containers/profilesContainer.ts","hApps/deepkey/components/deepKeyDetail.tsx","hApps/deepkey/components/deepKeyOverview.tsx","hApps/deepkey/actions.ts","hApps/deepkey/containers/deepKeyContainer.ts","nav.jsx","root.tsx","hApps/login/reducer.ts","hApps/personas-profiles/reducer.ts","hApps/deepkey/reducer.ts","store.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","withRoot","Component","props","ThemeProvider","CssBaseline","LoginForm","handleSubmit","login","state","history","push","email","password","this","setState","classes","className","root","Card","card","CardMedia","component","alt","height","image","title","CardContent","Typography","gutterBottom","variant","color","TextField","name","value","onChange","e","updateEmail","target","label","updatePassword","CardActions","Button","onClick","React","withStyles","createStyles","display","flexDirection","backgroundColor","withRouter","Login","createHolochainZomeCallAsyncAction","connect","dispatch","loginSpec","create","spec","Personas","console","log","getPersonas","personas","Paper","paper","List","id","map","persona","index","key","render","ListItem","hash","button","ListItemIcon","ListItemText","spacing","width","padding","CreatePersona","UpdatePersona","DeletePersona","GetPersonas","AddField","GetProfiles","CreateMapping","SetCurrentPersona","createAction","resolve","SetCurrentProfile","profile","personasProfiles","PersonaField","field","newName","data","newData","UsageType","Persona","personaSpec","personaFields","fields","then","catch","err","update","handleConfirmDelete","open","handleDelete","delete","handleCloseDialog","handleAddPersonaField","currentPersona","newField","slice","updateName","updateField","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","CircularProgress","nextProps","prevState","textAlign","paddingTop","marginRight","marginTop","ownProps","personaName","match","params","filter","personaAddress","Promise","all","persona_address","updatedPersonaAddress","require","parse","allSuggestions","renderSuggestion","suggestion","query","isHighlighted","matches","parts","MenuItem","selected","part","highlight","String","style","fontWeight","text","getSuggestionValue","renderSuggestionsContainer","options","children","containerProps","square","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","count","keep","UsageIcon","type","STORE","Tooltip","reason","Mapping","mapping","filteredPersonas","personaFieldName","selectedPersona","filteredSuggestions","AutoCompleteProfileField","renderInput","inputProps","ref","other","fullWidth","displayName","InputProps","input","textfield","disableUnderline","inputRef","handleChange","event","newVal","newValue","selectedSuggestion","undefined","handleSuggestionsFetchRequested","suggestions","handleSuggestionsClearRequested","handleMappingChange","fieldName","container","suggestionsContainerOpen","suggestionsList","renderInputComponent","onSuggestionsFetchRequested","onSuggestionsClearRequested","onBlur","usage","description","icon","filteredData","flexGrow","position","formControl","inputLabel","fontSize","menuItem","fontFamily","selectEmpty","left","right","zIndex","listStyleType","margin","float","allPersonaSuggestions","FieldMapper","updatedField","setPersonaAndFieldName","handlePersonaAutoChange","personaAutovalue","handlePersonaAutoSelect","fieldAutovalue","expansionPanelOpen","mappedPersona","mappedField","ExpansionPanel","expanded","boxShadow","ExpansionPanelSummary","expandIcon","mapSaved","ExpansionPanelDetails","Profile","selectedPersonas","handleSaveProfile","save","getProfiles","returnUrl","window","location","replace","decodeURIComponent","handleChangeSelectedPersona","setCurrentPersona","JSON","stringify","Grid","justify","selectContainer","select","form","i","marginLeft","marginBottom","paddingBottom","paddingLeft","paddingRight","profiles","sourceDna","currentProfile","newCurrentPersona","actions","selectedPersonaFields","personaField","retrieverDna","profileFieldName","Profiles","minWidth","media","currentKey","keyType","address","updateKey","makeZomeCall","action","actionCall","CardHeader","transformedText","toUpperCase","substr","displayProp","titleTypographyProps","subheader","subheaderTypographyProps","size","revocationKey","signedOldRevocationKey","priorRevocationSelfSig","authorizationKeyPath","signedAuthKey","oldKey","signedOldKey","context","Autorenew","DeleteForever","DeepKeyOverview","revocationRuleSet","isInitialized","allKeys","IsInitialized","GetRevocationRules","GetAuthorizer","GetAllKeys","UpdateKey","DeleteKey","deepKey","authorizerKeySet","deepkey","fetchIsInitialized","fetchRevocationRules","fetchAuthorizer","fetchAllKeys","args","deleteKey","useStyles","makeStyles","drawer","breakpoints","up","flexShrink","appBar","menuButton","toolbar","mixins","drawerPaper","content","Navigation","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","handleClickListItem","path","AppBar","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","keepMounted","xsDown","exact","PersonasContainer","PersonaContainer","ProfilesContainer","DeepKeyOverviewContainer","Root","store","initialState","loggedIn","combineReducers","getType","loginActions","success","payload","vaultActions","elem","entry","middleware","deepKeyAction","AuthorizerKeySet","REACT_APP_CHAT_WEBSOCKET_INTERFACE","process","rootReducer","holochainMiddleware","url","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","CreateStore","createStore","applyMiddleware","ReactDOM","document","querySelector"],"mappings":"ycAqBeA,EAjBDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCCAC,MAZf,SAAmBC,GASjB,OARA,SAAmBC,GACjB,OACE,kBAACC,EAAA,EAAD,CAAed,MAAOA,GACpB,kBAACe,EAAA,EAAD,MACA,kBAACH,EAAcC,M,ynBCoBvB,IASMG,E,YAEJ,WAAaH,GAA6B,IAAD,8BACvC,4CAAMA,KASRI,aAAe,WACb,EAAKJ,MAAMK,MAAM,EAAKC,MAAMD,OAC5B,EAAKL,MAAMO,QAAQC,KAAK,MAVxB,EAAKF,MAAQ,CACXD,MAAO,CACLI,MAAO,GACPC,SAAU,KALyB,E,yEAe5BD,GACXE,KAAKC,SAAS,CACZP,MAAM,EAAD,GACAM,KAAKL,MAAMD,MADX,CAEHI,MAAOA,Q,qCAKGC,GACdC,KAAKC,SAAS,CACZP,MAAM,EAAD,GACAM,KAAKL,MAAMD,MADX,CAEHK,SAAUA,Q,+BAKL,IAAD,OACAG,EAAYF,KAAKX,MAAjBa,QACR,OACE,uBAAKC,UAAWD,EAAQE,MACtB,gBAACC,EAAA,EAAD,CAAMF,UAAWD,EAAQI,MACvB,gBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,IAAI,YACJC,OAAO,MACPC,MAAM,gBACNC,MAAM,cAER,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKR,UAAU,MAAhD,2BAGA,gBAACM,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,gBAAgBT,UAAU,KAA5D,0MAKA,2BACE,gBAACU,EAAA,EAAD,CAAWC,KAAK,QAAQC,MAAOpB,KAAKL,MAAMD,MAAMI,MAAOuB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOJ,QAAQK,MAAM,UAC9G,gBAACP,EAAA,EAAD,CAAWC,KAAK,WAAWC,MAAOpB,KAAKL,MAAMD,MAAMK,SAAUsB,SAAU,SAAAC,GAAC,OAAI,EAAKI,eAAeJ,EAAEE,OAAOJ,QAAQK,MAAM,eAG3H,gBAACE,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAQT,KAAK,SAASU,QAAS,kBAAM,EAAKpC,gBAAgBwB,MAAM,WAAhE,iB,GA9DYa,aAuET3C,IAAS4C,YAhFT,SAAC,GAAD,IAAGrD,EAAH,EAAGA,QAAH,OAAwBsD,YAAa,CAClD5B,KAAM,CACJ6B,QAAS,OACTC,cAAe,SACfC,gBAAiBzD,EAAQO,WAAWC,QACpC+B,MAAOvC,EAAQC,QAAQC,SA2EHmD,CAAmBK,YAAW5C,K,QC3GzC6C,EAAQC,6CAA8D,oBAAqB,QAAS,SCgBlGC,cAZS,WACtB,MAAO,CACL3B,MAAM,UAIiB,SAAC4B,GAC1B,MAAO,CACL9C,MAAO,SAAC+C,GAAD,OAAeD,EAASH,EAAMK,OAAO,CAAEC,KAAMF,QAIzCF,CAGb/C,G,4BCmBIoD,G,4LAEFC,QAAQC,IAAI,gBACZ9C,KAAKX,MAAM0D,gB,+BAIF,IAAD,EACsB/C,KAAKX,MAA3Ba,EADA,EACAA,QAAS8C,EADT,EACSA,SACjB,OACA,uBAAK7C,UAAWD,EAAQE,MACtB,gBAAC6C,EAAA,EAAD,CAAO9C,UAAWD,EAAQgD,OACxB,gBAACpC,EAAA,EAAD,CAAYE,QAAQ,MAApB,YAGA,gBAACF,EAAA,EAAD,CAAYE,QAAQ,QAAQD,cAAc,GAA1C,qHAGA,gBAACoC,EAAA,EAAD,CAAMC,GAAG,WAAW5C,UAAU,OAE1BwC,EAASK,IAAI,SAACC,EAAsBC,GAAvB,OACX,gBAAC,IAAD,CAAOC,IAAKD,EACVE,OAAQ,gBAAG7D,EAAH,EAAGA,QAAH,OACN,gBAAC8D,EAAA,EAAD,CAAUF,IAAKD,EACbH,GAAIE,EAAQK,KACZC,QAAQ,EACR/B,QAAS,WACPjC,EAAQC,KAAR,mBAAyByD,EAAQnC,SAGnC,gBAAC0C,EAAA,EAAD,KACE,gBAAC,IAAD,OAEJ,gBAACC,EAAA,EAAD,CAAcnF,QAAS2E,EAAQnC,cAKzC,gBAAC,IAAD,CACEsC,OAAQ,gBAAG7D,EAAH,EAAGA,QAAH,OACN,gBAACgC,EAAA,EAAD,CACET,KAAK,aACLF,MAAM,UACNY,QAAS,WACPjC,EAAQC,KAAR,kBAGF,gBAAC,KAAD,MAPF,wB,GAxCWiC,aAwDR3C,KAAS4C,YAlFT,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAASrF,EAAZ,EAAYA,QAAZ,OAAiCsD,YAAa,CAC3D5B,KAAM,CACJ4D,MAAO,OACP7B,gBAAiBzD,EAAQO,WAAWiE,OAEtCA,MAAO,CACLe,QAASF,EAAQ,OA4EGhC,CAAmBK,YAAWQ,M,SCzFzCsB,GAAgB5B,6CAAgE,oBAAqB,WAAY,kBAEjH6B,GAAgB7B,6CAAyF,oBAAqB,WAAY,kBAE1I8B,GAAgB9B,6CAAoE,oBAAqB,WAAY,kBAErH+B,GAAc/B,6CAAiF,oBAAqB,WAAY,gBAEhIgC,GAAWhC,6CAAyF,oBAAqB,WAAY,aAIrIiC,GAAcjC,6CAAuD,oBAAqB,WAAY,gBAEtGkC,GAAgBlC,6CAA0F,oBAAqB,WAAY,kBAI3ImC,GAAoBC,wBAAa,iCAAkC,SAAAC,GAC9E,OAAO,SAACrB,GAAD,OAAsBqB,EAAQrB,MAG1BsB,GAAoBF,wBAAa,iCAAkC,SAAAC,GAC9E,OAAO,SAACE,GAAD,OAAsBF,EAAQE,MCVxBtC,eAZS,SAAC5C,GACvB,MAAO,CACLqD,SAAUrD,EAAMmF,iBAAiBD,QAAQ7B,WAIlB,SAACR,GAC1B,MAAO,CACLO,YAAa,kBAAMP,EAAS6B,GAAY3B,OAAO,QAIpCH,CAGbK,I,sqBCoCF,SAASmC,GAAc1F,GAgBrB,OACE,2BACE,gBAAC6B,EAAA,EAAD,CAAWC,KAAI,mBAAc9B,EAAMkE,OAAS9B,MAAM,aAAaL,MAAO/B,EAAM2F,MAAM7D,KAAME,SAAU,SAACC,GAAD,OAhBhF2D,EAgBoG3D,EAAEE,OAAOJ,WAfjI/B,EAAMgC,SAAN,MACKhC,EAAM2F,MADX,CAEE7D,KAAM8D,KAHW,IAACA,KAiBlB,gBAAC/D,EAAA,EAAD,CAAWC,KAAI,oBAAe9B,EAAMkE,OAAS9B,MAAM,cAAcL,MAAO/B,EAAM2F,MAAME,KAAM7D,SAAU,SAACC,GAAD,OAVlF6D,EAUsG7D,EAAEE,OAAOJ,WATnI/B,EAAMgC,SAAN,MACKhC,EAAM2F,MADX,CAEEE,KAAMC,KAHW,IAACA,M,IClDZC,GDiENC,G,YAEJ,WAAahG,GAA6B,IAAD,8BACvC,4CAAMA,KAWRI,aAAe,WACb,IAAM6F,EAA2B,CAAE,KAAQ,EAAK3F,MAAM2D,QAAQnC,MACxDoE,EAAyC,EAAK5F,MAAM2D,QAAQkC,OAClC,KAA5B,EAAK7F,MAAM2D,QAAQK,KACrB,EAAKtE,MAAMqD,OAAO4C,EAAaC,GAC5BE,KAAK,EAAKpG,MAAM0D,aAChB2C,MAAM,SAAAC,GAAG,OAAI9C,QAAQC,IAAI6C,KAE5B,EAAKtG,MAAMuG,OAAO,EAAKjG,MAAM2D,QAAQK,KAAM2B,EAAaC,GACrDE,KAAK,EAAKpG,MAAM0D,aAChB2C,MAAM,SAAAC,GAAG,OAAI9C,QAAQ/D,MAAM6G,KAEhC,EAAKtG,MAAMO,QAAQC,KAAK,cAxBe,EA2BzCgG,oBAAsB,WACpB,EAAK5F,SAAS,CACZ6F,MAAM,KA7B+B,EAiCzCC,aAAe,WACb,EAAK9F,SAAS,CACZ6F,MAAM,IAER,EAAKzG,MAAM2G,OAAO,EAAKrG,MAAM2D,QAAQK,MAClC8B,KAAK,EAAKpG,MAAM0D,aAChB2C,MAAM,SAAAC,GAAG,OAAI9C,QAAQ/D,MAAM6G,KAC9B,EAAKtG,MAAMO,QAAQC,KAAK,cAxCe,EA2CzCoG,kBAAoB,WAClB,EAAKhG,SAAS,CACZ6F,MAAM,KA7C+B,EAiDzCI,sBAAwB,WACtB,EAAKjG,SAAS,CACZqD,QAAQ,MACH,EAAK3D,MAAM2D,QADT,CAELkC,OAAO,GAAD,oBAAM,EAAK7F,MAAM2D,QAAQkC,QAAzB,CAAiC,CAAE,KAAQ,GAAI,KAAQ,WAnDjE,EAAK7F,MAAQ,CACXmG,MAAM,EACNxC,QAAS,CACPnC,KAAM,GACNwC,KAAM,GACN6B,OAAQ,KAP2B,E,iFA2DvCxF,KAAKX,MAAM0D,YAAY,IACpB2C,MAAM,SAACC,GAAD,OAAS9C,QAAQC,IAAI6C,KAC9B3F,KAAKC,SAAS,CACZ6F,MAAM,EACNxC,QAAStD,KAAKX,MAAM8G,mB,kCAcXC,EAA4B7C,GACvC,IAAMiC,EAASxF,KAAKL,MAAM2D,QAAQkC,OAClCxF,KAAKC,SAAS,CACZqD,QAAQ,MACHtD,KAAKL,MAAM2D,QADT,CAELkC,OAAO,GAAD,oBAAMA,EAAOa,MAAM,EAAG9C,IAAtB,CAA8B6C,GAA9B,aAA2CZ,EAAOa,MAAM9C,EAAQ,W,iCAKhE0B,GACVjF,KAAKC,SAAS,CACZqD,QAAQ,MACHtD,KAAKL,MAAM2D,QADT,CAELnC,KAAM8D,Q,+BAKD,IAAD,OACA/E,EAAYF,KAAKX,MAAjBa,QAER,OAAKF,KAAKL,MAAM2D,QASd,uBAAKnD,UAAWD,EAAQE,MACtB,gBAAC6C,EAAA,EAAD,CAAO9C,UAAWD,EAAQgD,OACxB,gBAACpC,EAAA,EAAD,CAAYE,QAAQ,MAApB,wBAGA,gBAACF,EAAA,EAAD,CAAYE,QAAQ,QAAQD,cAAc,GAA1C,2IAGE,2BACE,gBAACG,EAAA,EAAD,CAAWC,KAAK,cAAcC,MAAOpB,KAAKL,MAAM2D,QAAQnC,KAAME,SAAU,SAAAC,GAAC,OAAI,EAAKgF,WAAWhF,EAAEE,OAAOJ,QAAQK,MAAM,kBAErHzB,KAAKL,MAAM2D,QAAQkC,OAAOnC,IAAI,SAAC2B,EAAyBzB,GAA1B,OAA6C,gBAACwB,GAAD,CAAcvB,IAAKD,EAAOA,MAAOA,EAAOyB,MAAOA,EAAO3D,SAAU,SAAC+E,GAAD,OAAgC,EAAKG,YAAYH,EAAU7C,QACvM,gBAAC3B,EAAA,EAAD,CAAQT,KAAK,WAAWF,MAAM,UAAUY,QAAS7B,KAAKkG,uBACpD,gBAAC,KAAD,MADF,aAIA,gBAACtE,EAAA,EAAD,CAAQT,KAAK,gBAAgBF,MAAM,UAAUY,QAAS,kBAAM,EAAKpC,iBAC/D,gBAAC,KAAD,MAC6B,KAA5BO,KAAKL,MAAM2D,QAAQK,KAAc,iBAAmB,kBAEvD,gBAAC/B,EAAA,EAAD,CAAQT,KAAK,gBAAgBF,MAAM,UAAUY,QAAS,kBAAM,EAAKgE,wBAC/D,gBAAC,KAAD,MADF,kBAIA,gBAACW,GAAA,EAAD,CAAQV,KAAM9F,KAAKL,MAAMmG,KAAMW,QAASzG,KAAKiG,mBAC3C,gBAACS,GAAA,EAAD,CAAatD,GAAG,4BAAhB,UACUpD,KAAKL,MAAM2D,QAAQnC,KAD7B,aAGA,gBAACwF,GAAA,EAAD,KACE,gBAACC,GAAA,EAAD,4CAIF,gBAACC,GAAA,EAAD,KACE,gBAACjF,EAAA,EAAD,CAAQC,QAAS7B,KAAKiG,kBAAmBhF,MAAM,WAA/C,UAGA,gBAACW,EAAA,EAAD,CAAQwB,GAAG,QAAQvB,QAAS7B,KAAK+F,aAAc9E,MAAM,WAArD,cA5CR,2BACE,gBAAC6F,GAAA,EAAD,U,gDAnCyBC,EAAgCC,GAC/D,OAAKA,EAAU1D,QAKN,KAJA,CACLA,QAASyD,EAAUZ,oB,GAxELrE,aA+JP3C,KAAS4C,YArMT,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAAH,OAAwB/B,YAAa,CAClD5B,KAAM,CACJ6G,UAAW,OACXC,WAAYnD,EAAQ,IAEtBH,OAAQ,CACNuD,YAAapD,EAAQ,GACrBqD,UAAWrD,EAAQ,IAErBb,MAAO,CACLe,QAASF,EAAQ,OA2LGhC,CAAmBK,YAAWiD,MEhLvC9C,eAvDS,SAAC5C,EAAY0H,GAEnC,IACI/D,EADEgE,EAAcD,EAASE,MAAMC,OAAOrG,KAe1C,OAXEmC,EADkB,QAAhBgE,EACQ,CACRnG,KAAM,GACNwC,KAAM,GACN6B,OAAQ,IAGA7F,EAAMmF,iBAAiBD,QAAQ7B,SAASyE,OAAO,SAAUnE,GACjE,OAAOgE,IAAgBhE,EAAQnC,OAC9B,GAGE,CACLP,MAAM,aAAD,OAAe0G,GACpBnB,eAAgB7C,EAChBN,SAAUrD,EAAMmF,iBAAiBD,QAAQ7B,WAIlB,SAACR,GAC1B,MAAO,CACLO,YAAa,kBAAMP,EAAS6B,GAAY3B,OAAO,MAC/CA,OAAQ,SAAC4C,EAA0BC,GACjC,OAAO/C,EAAS0B,GAAcxB,OAAO,CAAEC,KAAM2C,KAC1CG,KAAK,SAACiC,GACL,OAAOC,QAAQC,IACbrC,EAAclC,IAAI,SAAC2B,GACjB,OAAOxC,EAAS8B,GAAS5B,OAAO,CAAEmF,gBAAiBH,EAAgB1C,iBAM7EY,OAAQ,SAAC8B,EAAwBpC,EAA0BC,GACzD,OAAO/C,EAAS2B,GAAczB,OAAO,CAAEmF,gBAAiBH,EAAgB/E,KAAM2C,KAC3EG,KAAK,SAACqC,GACL,OAAOH,QAAQC,IACbrC,EAAclC,IAAI,SAAC2B,GACjB,OAAOxC,EAAS8B,GAAS5B,OAAO,CAAEmF,gBAAiBC,EAAuB9C,iBAMpFgB,OAAQ,SAAC0B,GACP,OAAOlF,EAAS4B,GAAc1B,OAAO,CAAEmF,gBAAiBH,QAK/CnF,CAGb8C,I,8EDnDUD,K,cAAAA,E,mBAAAA,Q,onBEJZ,IAAMmC,GAAQQ,EAAQ,IAChBC,GAAQD,EAAQ,IA6ClBE,GAAwC,GAE5C,SAASC,GAAkBC,EAA3B,GAA0H,IAAjEC,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,cACxDC,EAAUf,GAAMY,EAAW1G,MAAO2G,GAClCG,EAAyBP,GAAMG,EAAW1G,MAAO6G,GAEvD,OACE,gBAACE,GAAA,EAAD,CAAUC,SAAUJ,EAAe7H,UAAU,OAC3C,2BACG+H,EAAMlF,IAAI,SAACqF,EAAgBnF,GAC1B,OAAOmF,EAAKC,UACV,wBAAMnF,IAAKoF,OAAOrF,GAAQsF,MAAO,CAAEC,WAAY,MAC5CJ,EAAKK,MAGR,0BAAQvF,IAAKoF,OAAOrF,GAAQsF,MAAO,CAAEC,WAAY,MAC9CJ,EAAKK,UASpB,SAASC,GAAoBb,GAC3B,OAAOA,EAAW1G,MAGpB,SAASwH,GAA4BC,GAAe,IAC1CC,EAAaD,EAAbC,SACR,OACE,gBAAClG,EAAA,EAAD,iBAAWiG,EAAQE,eAAnB,CAAmCC,QAAQ,IACxCF,GAKP,SAASG,GAAgBlI,GACvB,IAAMmI,EAAanI,EAAMoI,OAAOC,cAC1BC,EAAcH,EAAWI,OAC3BC,EAAQ,EACZ,OAAuB,IAAhBF,EACH,GACAzB,GAAeR,OAAO,SAAAU,GACtB,IAAM0B,EAAOD,EAAQ,GAAKzB,EAAW1G,MAAMgI,cAAcpD,MAAM,EAAGqD,KAAiBH,EAInF,OAHIM,IACFD,GAAS,GAEJC,IAyBb,SAASC,GAAWzK,GAClB,OAAQA,EAAM0K,MACZ,KAAK3E,GAAU4E,MACb,OAAQ,gBAACC,GAAA,EAAD,CAASrJ,MAAOvB,EAAM6K,QAAQ,gBAAC,KAAD,OACxC,QACE,OAAQ,gBAACD,GAAA,EAAD,CAASrJ,MAAOvB,EAAM6K,QAAQ,gBAAC,KAAD,QAI5C,SAASC,GAAS9K,GAChB,GAAIA,EAAM2F,MAAMoF,QAAS,CACvB,IAAIA,EAAU/K,EAAM2F,MAAMoF,QACtBC,EAAmBhL,EAAM2D,SAASyE,OAAO,SAAUnE,GACrD,OAAO8G,EAAQ1C,iBAAmBpE,EAAQK,OAE5C,OAAI0G,EAAiBV,OAAS,GACTU,EAAiB,GAAG7E,OAAOiC,OAAO,SAAUzC,GAC7D,OAAOA,EAAM7D,OAASiJ,EAAQE,mBAEfX,OAAS,EAChB,gBAAC7I,EAAA,EAAD,CAAYX,UAAWd,EAAMa,QAAQoD,SAAU+G,EAAiB,GAAGlJ,KAAO,MAAQiJ,EAAQE,kBAK5F,gBAACxJ,EAAA,EAAD,CAAYX,UAAWd,EAAMa,QAAQoD,SAAUjE,EAAMkL,gBAAgBpJ,KAAO,MAAQ9B,EAAM2F,MAAM7D,MAG1G,IAAIqJ,EAAsBvC,GAAeR,OAAO,SAAUU,GACxD,OAAOA,EAAWnD,MAAM7D,OAAS9B,EAAM2F,MAAM7D,OAE/C,OAAIqJ,EAAoBb,OAAS,EACvB,gBAAC7I,EAAA,EAAD,CAAYX,UAAWd,EAAMa,QAAQoD,SAAUkH,EAAoB,GAAGlH,QAAQnC,KAAO,MAAQqJ,EAAoB,GAAGxF,MAAM7D,MAE1H,gBAACL,EAAA,EAAD,CAAYX,UAAWd,EAAMa,QAAQoD,SAAUjE,EAAMkL,gBAAgBpJ,KAAO,MAAQ9B,EAAM2F,MAAM7D,M,IAKxGsJ,G,YACJ,WAAapL,GAAe,IAAD,8BACzB,4CAAMA,KAoEDqL,YAAc,SAACC,GAAqB,IACjCzK,EAA2ByK,EAA3BzK,QAAS0K,EAAkBD,EAAlBC,IAAQC,EADe,aACLF,EADK,mBAGxC,OACE,2BACE,gBAACzJ,EAAA,EAAD,CACE4J,WAAW,EACX1H,GAAG,OACHjC,KAAK,OACLM,MAAO,EAAKpC,MAAM2F,MAAM+F,YACxBC,WAAU,IACR9K,QAAS,CACP+K,MAAO/K,EAAQgL,WAEjBC,kBAAkB,EAClBC,SAAUR,GACPC,OArFc,EA4FpBQ,aAAe,SAACC,EAAYC,GACjC,IAAIC,EAAWD,EAAOC,SAClBxG,EAAQ,EAAKrF,MAAMqF,MACnByG,EAAqBxD,GAAeR,OAAO,SAAUU,GACvD,OAAOqD,IAAarD,EAAW1G,QAEC,IAA9BgK,EAAmB9B,QACjB4B,EAAOC,SAAS7B,OAAS,EAC3B3E,EAAMoF,QAAU,CACd1C,eAAgB,EAAKrI,MAAMkL,gBAAgB5G,KAC3C2G,iBAAkB,EAAKjL,MAAM2F,MAAM7D,MAGrC6D,EAAMoF,aAAUsB,EAElB,EAAKzL,SAAS,CACZmB,MAAOoK,EACPxG,MAAOA,MAGTwG,EAAWC,EAAmB,GAAGzG,MAAME,KACvCF,EAAMoF,QAAU,CACd1C,eAAgB+D,EAAmB,GAAGnI,QAAQK,KAC9C2G,iBAAkBmB,EAAmB,GAAGzG,MAAM7D,MAEhD,EAAKlB,SAAS,CACZmB,MAAOoK,EACPxG,MAAOA,MAvHc,EA4HpB2G,gCAAkC,YAAgC,IAA7BvK,EAA4B,EAA5BA,MAC1C,EAAKnB,SAAS,CACZ2L,YAAatC,GAAelI,MA9HL,EAkIpByK,gCAAkC,WACvC,EAAK5L,SAAS,CACZ2L,YAAa,MApIU,EAwIpBE,oBAAsB,WAC3B,EAAKzM,MAAMyM,oBAAoB,EAAKnM,MAAMqF,MAAO,EAAKrF,MAAMyB,QAvI5D,EAAKzB,MAAQ,CACX4K,gBAAiBlL,EAAMkL,gBACvBqB,YAAa,GACbxK,MAAO,GACP4D,MAAO3F,EAAM2F,OANU,E,iFA6CzB,IAAKhF,KAAKX,MAAM2F,MAAMoF,QAAS,CAC7B,IAAIpF,EAAQhF,KAAKL,MAAMqF,MACnB+G,EAAY/L,KAAKX,MAAM2F,MAAM7D,KAC7BqJ,EAAsBvC,GAAeR,OAAO,SAAUU,GACxD,OAAOA,EAAWnD,MAAM7D,OAAS4K,IAE/BvB,EAAoBb,OAAS,GAC/B3E,EAAMoF,QAAU,CACd1C,eAAgB8C,EAAoB,GAAGlH,QAAQK,KAC/C2G,iBAAkBE,EAAoB,GAAGxF,MAAM7D,MAEjDnB,KAAKC,SAAS,CACZmB,MAAOoJ,EAAoB,GAAGxF,MAAME,KACpCF,MAAOA,MAGTA,EAAMoF,aAAUsB,EAChB1L,KAAKC,SAAS,CACZ+E,MAAOA,Q,+BA6EG,IAAD,EACgDhF,KAAKX,MAA5Da,EADO,EACPA,QAAS8E,EADF,EACEA,MAAOH,EADT,EACSA,QAAS7B,EADlB,EACkBA,SAAUuH,EAD5B,EAC4BA,gBAE3C,OACE,uBAAKpK,UAAWD,EAAQE,MACtB,gBAAC,KAAD,CACEgD,GAAG,4BACH5E,MAAO,CACLwN,UAAW9L,EAAQ8L,UACnB7D,WAAYjI,EAAQiI,WACpB8D,yBAA0B/L,EAAQ+L,yBAClCC,gBAAiBhM,EAAQgM,iBAE3BC,qBAAsBnM,KAAK0K,YAC3BkB,YAAa5L,KAAKL,MAAMiM,YACxBQ,4BAA6BpM,KAAK2L,gCAClCU,4BAA6BrM,KAAK6L,gCAClC5C,2BAA4BA,GAC5BD,mBAAoBA,GACpBd,iBAAkBA,GAClByC,WAAY,CACVzK,UACAoM,OAAQtM,KAAK8L,oBACbzK,SAAUrB,KAAKqL,aACfjK,MAAOpB,KAAKL,MAAMyB,SAGtB,gBAAC0I,GAAD,CAAWC,KAAM/E,EAAMuH,MAAOrC,OAAQlF,EAAMwH,YAAarM,UAAWD,EAAQuM,OAC5E,gBAACtC,GAAD,CAASjK,QAASA,EAAS2E,QAASA,EAASG,MAAOhF,KAAKL,MAAMqF,MAAOhC,SAAUA,EAAUuH,gBAAiBA,Q,gDA9JhFxD,EAAkBC,GAOjD,GANAiB,GAAiB,GACjBlB,EAAU/D,SAASK,IAAI,SAACC,GAAD,OACrBA,EAAQkC,OAAOnC,IAAI,SAAC2B,GAAD,OACjBiD,GAAepI,KAAK,CAAEyD,QAASA,EAAS0B,MAAOA,EAAOvD,MAAOuD,EAAME,KAAO,KAAO5B,EAAQnC,KAAO,MAAQ6D,EAAM7D,KAAO,UAGrH4F,EAAU/B,MAAMoF,QAAS,CAC3B,IAAIA,EAAUrD,EAAU/B,MAAMoF,QAC9B,GAAIrD,EAAUwD,kBAAoBvD,EAAUuD,gBACtBxD,EAAUwD,gBAAgB/E,OAAOiC,OAAO,SAAUzC,GACpE,OAAOA,EAAM7D,OAASiJ,EAAQE,mBAEdX,OAAS,IACzBS,EAAQ1C,eAAiBX,EAAUwD,gBAAgB5G,MAGvD,IAAI0G,EAAmBtD,EAAU/D,SAASyE,OAAO,SAAUnE,GACzD,OAAO8G,EAAQ1C,iBAAmBpE,EAAQK,OAE5C,GAAI0G,EAAiBV,OAAS,EAAG,CAC/B,IAAI+C,EAAerC,EAAiB,GAAG7E,OAAOiC,OAAO,SAAUzC,GAC7D,OAAOA,EAAM7D,OAASiJ,EAAQE,mBAEhC,GAAIoC,EAAa/C,OAAS,EACxB,MAAO,CACLvI,MAAOsL,EAAa,GAAGxH,OAK/B,OAAO,S,GA1C4BpD,aA+KxBC,eA5UA,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAAH,OAAwB/B,YAAa,CAClD5B,KAAM,CACJ4D,MAAO,QAETgI,UAAW,CACTW,SAAU,EACVC,SAAU,YAEZC,YAAa,CACX5N,WAAY,OAEd6N,WAAY,CACV7L,MAAO,UACP8L,SAAU,IAEZC,SAAU,CACRC,WAAY,SACZF,SAAU,GACVrM,OAAQ,IAEVwM,YAAa,CACXjO,WAAY,OACZmI,UAAWrD,EAAQ,IAErBoE,WAAY,CACVlG,QAAS,SAEXgK,yBAA0B,CACxBkB,KAAM,EACN/F,UAAWrD,EAAQ,GACnB6I,SAAU,WACVQ,MAAO,EACPC,OAAQ,GAEVnB,gBAAiB,CACfoB,cAAe,OACfC,OAAQ,EACRtJ,QAAS,GAEXX,QAAS,CACPkK,MAAO,YAoSIzL,CAAmB0I,I,ujBC7UlC,IAAMlD,GAAQQ,EAAQ,IAChBC,GAAQD,EAAQ,IA0ClB0F,GAAuC,GAE3C,SAASvF,GAAkBC,EAA3B,GAAkH,IAAjEC,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,cAChDC,EAAUf,GAAMY,EAAYC,GAC5BG,EAAyBP,GAAMG,EAAYG,GAEjD,OACE,gBAACE,GAAA,EAAD,CAAUC,SAAUJ,EAAe7H,UAAU,OAC3C,2BACG+H,EAAMlF,IAAI,SAACqF,EAAgBnF,GAC1B,OAAOmF,EAAKC,UACV,wBAAMnF,IAAKoF,OAAOrF,GAAQsF,MAAO,CAAEC,WAAY,MAC5CJ,EAAKK,MAGR,0BAAQvF,IAAKoF,OAAOrF,GAAQsF,MAAO,CAAEC,WAAY,MAC9CJ,EAAKK,UASpB,SAASC,GAAoBb,GAC3B,OAAOA,EAGT,SAASc,GAA4BC,GAAe,IAC1CC,EAAaD,EAAbC,SACR,OACE,gBAAClG,EAAA,EAAD,iBAAWiG,EAAQE,eAAnB,CAAmCC,QAAQ,IACxCF,GAKP,SAASG,GAAgBlI,GACvB,IAAMmI,EAAanI,EAAMoI,OAAOC,cAC1BC,EAAcH,EAAWI,OAC3BC,EAAQ,EACZ,OAAuB,IAAhBF,EACH,GACA+D,GAAsBhG,OAAO,SAAAU,GAC7B,IAAM0B,EAAOD,EAAQ,GAAKzB,EAAWsB,cAAcpD,MAAM,EAAGqD,KAAiBH,EAI7E,OAHIM,IACFD,GAAS,GAEJC,I,IAiCP6D,G,YACJ,WAAarO,GAAe,IAAD,8BACzB,4CAAMA,KA2DRyM,oBAAsB,SAAC6B,EAA4BvM,GACjD,EAAK/B,MAAMyM,oBAAoB6B,EAAcvM,GAC7C,EAAKwM,uBAAuBD,IA9DH,EA0FpBjD,YAAc,SAACC,GAAqB,IACjCzK,EAA2ByK,EAA3BzK,QAAS0K,EAAkBD,EAAlBC,IAAQC,EADe,aACLF,EADK,mBAGxC,OACE,2BACE,gBAACzJ,EAAA,EAAD,CACE4J,WAAW,EACX1H,GAAG,kBACHjC,KAAK,kBACLM,MAAM,eACNuJ,WAAU,IACR9K,QAAS,CACP+K,MAAO/K,EAAQgL,WAEjBC,kBAAkB,EAClBC,SAAUR,GACPC,OA1Gc,EAgHpBc,gCAAkC,YAAgC,IAA7BvK,EAA4B,EAA5BA,MAC1C,EAAKnB,SAAS,CACZ2L,YAAatC,GAAelI,MAlHL,EAsHpByK,gCAAkC,WACvC,EAAK5L,SAAS,CACZ2L,YAAa,MAxHU,EA4HpBiC,wBAA0B,SAACvC,EAAYC,GAC5C,IAAIC,EAAWD,EAAOC,SACtB,EAAKvL,SAAS,CACZ6N,iBAAkBtC,KA/HK,EAkIpBuC,wBAA0B,aAhI/B,EAAKpO,MAAQ,CACXiM,YAAa,GACbkC,iBAAkBzO,EAAMkL,gBAAgBpJ,KACxCoJ,gBAAiBlL,EAAMkL,gBACvByD,eAAgB,GAChBC,oBAAoB,EACpBC,cAAe7O,EAAMkL,gBACrB4D,YAAa9O,EAAM2F,MAAM7D,MATF,E,sFAmDQuK,IAA7B1L,KAAKX,MAAM2F,MAAMoF,SACnBpK,KAAK4N,uBAAuB5N,KAAKX,MAAM2F,OAEzCyI,GAAwB,GACxBzN,KAAKX,MAAM2D,SAASK,IAAI,SAACC,GAAD,OACtBmK,GAAsB5N,KAAKyD,EAAQnC,U,6CASR6D,GAC7B,QAAsB0G,IAAlB1G,EAAMoF,QAAuB,CAC/B,IAAIA,EAAUpF,EAAMoF,QAChBC,EAAmBrK,KAAKX,MAAM2D,SAASyE,OAAO,SAAUnE,GAC1D,OAAO8G,EAAQ1C,iBAAmBpE,EAAQK,OAEZ,IAA5B0G,EAAiBV,OACnB3J,KAAKC,SAAS,CACZiO,cAAe7D,EAAiB,GAChC8D,YAAanJ,EAAMoF,QAAQE,iBAC3BwD,iBAAkBzD,EAAiB,GAAGlJ,OAGxCnB,KAAKC,SAAS,CACZiO,cAAelO,KAAKX,MAAM2D,SAAS,GACnC8K,iBAAkB9N,KAAKX,MAAM2D,SAAS,GAAG7B,YAI7CnB,KAAKC,SAAS,CACZ6N,iBAAkB9N,KAAKX,MAAMkL,gBAAgBpJ,S,+BAgDxC,IAAD,SACsCnB,KAAKX,MAA3Ca,EADA,EACAA,QAAS8E,EADT,EACSA,MAAOhC,EADhB,EACgBA,SAAU6B,EAD1B,EAC0BA,QACnC,OACG,uBAAK1E,UAAWD,EAAQE,MACtB,gBAACgO,GAAA,EAAD,CAAgBC,SAAUrO,KAAKL,MAAMsO,mBAAoBpF,MAAO,CAAEyF,UAAW,SAC3E,gBAACC,GAAA,EAAD,CAAuBC,WAAY,gBAAC,IAAD,CAAQrN,KAAK,uBAAuBF,MAAOjB,KAAKX,MAAMoP,SAAW,UAAY,YAAa5M,QAAS,WAAQ,EAAK5B,SAAS,CAAEgO,oBAAqB,EAAKtO,MAAMsO,yBAC5L,gBAAC,GAAD,CACEjL,SAAUA,EACVuH,gBAAiBvK,KAAKL,MAAM4K,gBAC5B1F,QAASA,EACTG,MAAOA,EACP8G,oBAAqB9L,KAAK8L,uBAG9B,gBAAC4C,GAAA,EAAD,KACE,gBAAC,KAAD,CACEtL,GAAG,uBACH5E,MAAO,CACLwN,UAAW9L,EAAQ8L,UACnB7D,WAAYjI,EAAQiI,WACpB8D,yBAA0B/L,EAAQ+L,yBAClCC,gBAAiBhM,EAAQgM,iBAE3BC,qBAAsBnM,KAAK0K,YAC3BkB,YAAa5L,KAAKL,MAAMiM,YACxBQ,4BAA6BpM,KAAK2L,gCAClCU,4BAA6BrM,KAAK6L,gCAClC5C,2BAA4BA,GAC5BD,mBAAoBA,GACpBd,iBAAkBA,GAClByC,WAAY,CACVzK,UACAoM,OAAQtM,KAAK+N,wBACb1M,SAAUrB,KAAK6N,wBACfzM,MAAOpB,KAAKL,MAAMmO,oBAGtB,gBAAC5M,EAAA,EAAD,CAAWf,UAAWD,EAAQ8E,MAAO7D,KAAK,QAAQM,MAAM,QAAQL,MAAOpB,KAAKL,MAAMwO,oB,gDA7J3DpH,EAAkBC,GACjD,GAAID,EAAUwD,kBAAoBvD,EAAUuD,gBAAiB,CAC3D,QAAgCmB,IAA5B3E,EAAU/B,MAAMoF,QAAuB,CACzC,IAAIA,EAAUrD,EAAU/B,MAAMoF,QACVrD,EAAUwD,gBAAgB/E,OAAOiC,OAAO,SAAUzC,GACpE,OAAOA,EAAM7D,OAASiJ,EAAQE,mBAEdX,OAAS,IACzBS,EAAQ1C,eAAiBX,EAAUwD,gBAAgB5G,MAErD,IAAI0G,EAAmBtD,EAAU/D,SAASyE,OAAO,SAAUnE,GACzD,OAAO8G,EAAQ1C,iBAAmBpE,EAAQK,OAE5C,OAAgC,IAA5B0G,EAAiBV,OACZ,CACLY,gBAAiBxD,EAAUwD,gBAC3B2D,cAAe7D,EAAiB,GAChC8D,YAAapH,EAAU/B,MAAMoF,QAAQE,iBACrCwD,iBAAkBzD,EAAiB,GAAGlJ,MAGjC,CACLoJ,gBAAiBxD,EAAUwD,gBAC3B2D,cAAenH,EAAU/D,SAAS,GAClC8K,iBAAkB/G,EAAU/D,SAAS,GAAG7B,MAI5C,MAAO,CACLoJ,gBAAiBxD,EAAUwD,gBAC3BuD,iBAAkB/G,EAAUwD,gBAAgBpJ,MAIlD,OAAO,S,GAhDeW,aAmLX3C,KAAS4C,YA9ST,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAAH,OAAwB/B,YAAa,CAClD5B,KAAM,CACJ4D,MAAO,QAETgI,UAAW,CACTW,SAAU,EACV3I,MAAO,OAETgB,MAAO,CACLhB,MAAO,OAET8I,WAAY,CACV7L,MAAO,UACP8L,SAAU,IAEZC,SAAU,CACRC,WAAY,SACZF,SAAU,GACVrM,OAAQ,IAEVwM,YAAa,CACXjO,WAAY,OACZmI,UAAWrD,EAAQ,IAErBoE,WAAY,CACVlG,QAAS,SAEXgK,yBAA0B,CACxBkB,KAAM,EACN/F,UAAWrD,EAAQ,GACnB6I,SAAU,WACVQ,MAAO,EACPC,OAAQ,GAEVnB,gBAAiB,CACfoB,cAAe,OACfC,OAAQ,EACRtJ,QAAS,MAyQWlC,CAAmB2L,K,UCvPrCiB,G,YACJ,WAAatP,GAA6B,IAAD,8BACvC,4CAAMA,KAuBRyM,oBAAsB,SAAC6B,EAA4BvM,GAGjD,GADAyB,QAAQC,IAAI,qBACiB4I,IAAzBiC,EAAavD,QAAuB,CACtC,IAAIpH,EAAW,EAAK3D,MAAM2D,SACtB0E,EAAiBiG,EAAavD,QAAQ1C,eACtC4C,EAAmBqD,EAAavD,QAAQE,iBACxCsE,EAAmB5L,EAASyE,OAAO,SAAUnE,GAC/C,OAAOA,EAAQK,OAAS+D,IAE1B,GAAgC,IAA5BkH,EAAiBjF,OAIkB,IAHTiF,EAAiB,GAAGpJ,OAAOiC,OAAO,SAAUzC,GACtE,OAAOA,EAAM7D,OAASmJ,IAEEX,SACxBiF,EAAiB,GAAGpJ,OAAO3F,KAAK,CAAEsB,KAAMmJ,EAAkBpF,KAAM9D,IAChE,EAAKnB,SAAS,CACZ+C,SAAUA,KAMlB,EAAKrD,MAAMkF,QAAQW,OAAOiC,OAAO,SAAUzC,GACzC,OAAOA,EAAM7D,OAASwM,EAAaxM,OAClC,GAAKwM,EAER,EAAK1N,SAAS,CACZ4E,QAAS,EAAKlF,MAAMkF,WApDiB,EAwDzCgK,kBAAoB,WAClB,EAAKxP,MAAMyP,KAAK,EAAKnP,MAAMkF,QAAS,EAAKxF,MAAM2D,UAC5CyC,KAAK,EAAKpG,MAAM0P,aAChBtJ,KAAK,WACyB,cAAzB,EAAKpG,MAAM2P,UACb,EAAK3P,MAAMO,QAAQC,KAAK,EAAKR,MAAM2P,WAEnCC,OAAOC,SAASC,QAAQC,mBAAmB,EAAK/P,MAAM2P,cAGzDtJ,MAAM,SAAAC,GAAG,OAAI9C,QAAQC,IAAI6C,MAlEW,EAqElC0J,4BAA8B,SAAC/D,GACpC,IAAI5D,EAAiB4D,EAAM9J,OAAOJ,MAC9BmJ,EAAkB,EAAKlL,MAAM2D,SAASyE,OAAO,SAAUnE,GACzD,OAAOA,EAAQK,OAAS+D,IACvB,GACH,EAAKrI,MAAMiQ,kBAAkB/E,IAxE7B,EAAK5K,MAAQ,CACXkF,QAASxF,EAAMwF,QACf7B,SAAU3D,EAAM2D,UAJqB,E,iFAQnB,IAAD,OACnBhD,KAAKX,MAAM0D,YAAY,IACpB0C,KAAK,kBAAM,EAAKpG,MAAM0P,YAAY,MAClCrJ,MAAM,SAACC,GAAD,OAAS9C,QAAQC,IAAIyM,KAAKC,UAAU7J,Q,+BAkEpC,IAAD,OACR,IAAK3F,KAAKX,MAAMkL,kBAAoBvK,KAAKX,MAAMwF,QAC7C,OACE,gBAAC4K,GAAA,EAAD,CAAMzD,WAAW,EAAM0D,QAAQ,UAC7B,gBAAC5I,GAAA,EAAD,OAJE,MASqB9G,KAAKX,MAA1BwF,EATA,EASAA,QAAS3E,EATT,EASSA,QAEjB,OACE,uBAAKC,UAAWD,EAAQ8L,WACtB,gBAAC/I,EAAA,EAAD,CAAO9C,UAAWD,EAAQgD,OACxB,gBAACpC,EAAA,EAAD,CAAYE,QAAQ,KAAKR,UAAU,MAAnC,eACeqE,EAAQ1D,MAEvB,gBAACL,EAAA,EAAD,CAAYN,UAAU,KAAtB,oFAGA,gBAACyC,EAAA,EAAD,CAAO9C,UAAWD,EAAQyP,iBACxB,gBAACzO,EAAA,EAAD,CAAWC,KAAK,iBAAiBhB,UAAWD,EAAQ0P,OAAQA,QAAQ,EAAMxO,MAAOpB,KAAKX,MAAMkL,gBAAgB5G,KAAMtC,SAAUrB,KAAKqP,4BAA6B5N,MAAM,oBACnKzB,KAAKX,MAAM2D,SAASK,IAAI,SAACC,GACxB,OACE,gBAACkF,GAAA,EAAD,CAAUhF,IAAKF,EAAQK,KAAMvC,MAAOkC,EAAQK,MACzCL,EAAQnC,UAMjB,gBAAC8B,EAAA,EAAD,CAAO9C,UAAWD,EAAQ2P,MACvB7P,KAAKL,MAAMkF,QAAQW,OAAOnC,IAAI,SAAC2B,EAAO8K,GACrC,OACE,gBAAC,GAAD,CACEtM,IAAKsM,EACL9M,SAAU,EAAK3D,MAAM2D,SACrBuH,gBAAiB,EAAKlL,MAAMkL,gBAC5B1F,QAASA,EACTG,MAAOA,EACPyJ,SAAU,EAAKpP,MAAMwF,QAAQW,OAAOsK,GAAG1F,QACvC0B,oBAAqB,EAAKA,wBAIhC,gBAAClK,EAAA,EAAD,CAAQwB,GAAG,QAAQvB,QAAS7B,KAAK6O,kBAAmB5N,MAAM,WAA1D,sB,gDA5GuB8F,EAAgCC,GAC/D,OAAKA,EAAUnC,QAKN,KAJA,CACLA,QAASkC,EAAUlC,a,GAlBL/C,aAsIP3C,KAAS4C,YA7LT,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAAH,OAAwB/B,YAAa,CAClDgK,UAAW,CACTW,SAAU,EACVC,SAAU,YAEZhJ,OAAQ,CACNuD,YAAapD,EAAQ,GACrBqD,UAAWrD,EAAQ,GACnBgM,WAAY,GACZC,aAAc,IAEhBL,gBAAiB,CACfzI,WAAY,GACZ+I,cAAe,GACfC,YAAa,GACbC,aAAc,GACdnM,MAAO,OACPgM,aAAc,IAEhBJ,OAAQ,CACN5L,MAAO,QAETd,MAAO,CACLe,QAASF,EAAQ,OAsKGhC,CAAmBK,YAAWuM,M,ujBCjMtD,IA8EepM,eA9ES,SAAC5C,EAAY0H,GAKnC,IAAIxC,EACAmK,EAAoB,YAExB,GAAI3H,EAASE,MAAO,CAClB,IAAM5D,EAAO0D,EAASE,MAAMC,OAAO7D,KACnCkB,EAAUlF,EAAMmF,iBAAiBD,QAAQuL,SAAS3I,OAAO,SAAC5C,GAExD,OADAhC,QAAQC,IAAI+B,EAAQwL,YAAc1M,GAC3BkB,EAAQwL,YAAc1M,IAC5B,GAEDqL,EADE3H,EAASE,MAAMC,OAAOwH,UACZ3H,EAASE,MAAMC,OAAOwH,UAEtB,YAEdnM,QAAQC,IAAI,aAAekM,QAE3BnK,EAAUlF,EAAMmF,iBAAiBD,QAAQyL,eAG3C,MAAO,CACLtB,UAAWA,EACXhM,SAAUrD,EAAMmF,iBAAiBD,QAAQ7B,SACzCuH,gBAAiB5K,EAAMmF,iBAAiBD,QAAQsB,eAChDtB,QAASA,IAIc,SAACrC,GAC1B,MAAO,CACLuM,YAAa,kBAAMvM,EAAS+B,GAAY7B,OAAO,MAC/CK,YAAa,kBAAMP,EAAS6B,GAAY3B,OAAO,MAC/C4M,kBAAmB,SAACiB,GAAqC/N,EAASiC,GAAkB8L,KACpFzB,KAAM,SAACjK,EAAsB7B,GAI3B,OAFAH,QAAQC,IAAI,gBAAiB+B,GAEtB8C,QAAQC,IACb/C,EAAQW,OAAOiC,OAAO,SAAAzC,GAAK,OAAIA,EAAMoF,UAAS/G,IAAI,SAAC2B,GAEjD,IAAIwL,EAAU,GAGd,GADA3N,QAAQC,IAAI,6BAA8BkC,EAAM+F,kBAC1BW,IAAlB1G,EAAMoF,QAAuB,CAC/B,IAAI1C,EAAiB1C,EAAMoF,QAAQ1C,eAC/B4C,EAAmBtF,EAAMoF,QAAQE,iBACjCsE,EAAmB5L,EAASyE,OAAO,SAAUnE,GAC/C,OAAOA,EAAQK,OAAS+D,IAE1B,GAAgC,IAA5BkH,EAAiBjF,OAAc,CACjC,IAAI8G,EAAwB7B,EAAiB,GAAGpJ,OAAOiC,OAAO,SAAUzC,GACtE,OAAOA,EAAM7D,OAASmJ,IAExB,GAAqC,IAAjCmG,EAAsB9G,OAAc,CACtC,IAAI+G,EAA6BD,EAAsB,GACvDD,EAAQ3Q,KAAK2C,EAAS8B,GAAS5B,OAAO,CAAEmF,gBAAiBH,EAAgB1C,MAAO0L,QAWtF,OAPA7N,QAAQC,IAAI,oBAAqBkC,GACjCwL,EAAQ3Q,KAAK2C,EAASgC,GAAc9B,OAAO,CAAC0H,QAAQ,MAC/CpF,EAAMoF,QADwC,CAEjDuG,aAAc9L,EAAQwL,UACtBO,iBAAkB5L,EAAM7D,WAGnBwG,QAAQC,IAAI4I,SAQdjO,CAGboM,ICzDIkC,G,4LAIF7Q,KAAKX,MAAM0P,YAAY,IACtBrJ,MAAM,SAAAwE,GAAYrH,QAAQC,IAAIyM,KAAKC,UAAUtF,Q,+BAGrC,IAAD,EACsBlK,KAAKX,MAA3Ba,EADA,EACAA,QAASkQ,EADT,EACSA,SACjB,OACE,uBAAKjQ,UAAWD,EAAQE,MACtB,gBAAC6C,EAAA,EAAD,CAAO9C,UAAWD,EAAQgD,OACxB,gBAACpC,EAAA,EAAD,CAAYE,QAAQ,MAApB,YAGA,gBAACF,EAAA,EAAD,CAAYE,QAAQ,QAAQD,cAAc,GAA1C,qIAGA,gBAACoC,EAAA,EAAD,KAEIiN,EAAS/M,IAAI,SAACwB,EAAkBtB,GAAnB,OAEX,gBAAC,IAAD,CACEC,IAAKD,EACLE,OAAQ,gBAAG7D,EAAH,EAAGA,QAAH,OACN,gBAAC8D,EAAA,EAAD,CAAUE,QAAQ,EAAM/B,QAAS,WAAQjC,EAAQC,KAAR,mBAAyBgF,EAAQwL,cACxE,gBAACvM,EAAA,EAAD,CAAcnF,QAASkG,EAAQ1D,oB,GA3B9BW,aAwCR3C,KAAS4C,YAhET,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAAH,OAAwB/B,YAAa,CAClD5B,KAAM,CACJ6G,UAAW,OACXC,WAAYnD,EAAQ,IAEtBb,MAAO,CACLe,QAASF,EAAQ,OA0DGhC,CAAmB8O,KCzD5BtO,eAZS,SAAC5C,GACvB,MAAO,CACLyQ,SAAUzQ,EAAMmF,iBAAiBD,QAAQuL,WAIlB,SAAC5N,GAC1B,MAAO,CACLuM,YAAa,kBAAMvM,EAAS+B,GAAY7B,OAAO,QAIpCH,CAGbK,I,8BCmEazD,SAAS4C,YAlFT,SAAC,GAAD,EAAGrD,QAAH,OAAwBsD,YAAa,CAClD1B,KAAM,CACJwQ,SAAU,KAEZC,MAAO,CACLrQ,OAAQ,EACRwG,WAAY,UAEdsJ,QAAS,CACPvO,QAAS,QAEXrB,MAAO,CACLmM,SAAU,EACV3F,UAAW,OAqESrF,CAjExB,SAAwB1C,GAAa,IAC3B2R,EAAqD3R,EAArD2R,WAAY9Q,EAAyCb,EAAzCa,QAAS+Q,EAAgC5R,EAAhC4R,QAASC,EAAuB7R,EAAvB6R,QAASC,EAAc9R,EAAd8R,UAUzCC,EAAe,SAACC,EAAgB7J,IAEpC8J,EADmBjS,EAAMgS,IACd7J,GACR9B,MAAM,SAACwE,GAAkBrH,QAAQC,IAAI,wCAAyCuO,EAAQ9B,KAAKC,UAAUtF,OA4B1G,OACA,gBAAC7J,EAAA,EAAD,CAAMF,UAAWD,EAAQI,MACxB,gBAACiR,GAAA,EAAD,CACK3Q,MAAK,UAzCS,SAACmI,GACnB,IAAMyI,EAAkBzI,EAAKoG,QAAQ,WAAY,OAAO3F,OAGxD,OAFuBgI,EAAgB,GAAGC,cACPD,EAAgBE,OAAO,GAsC5CC,CAAYV,IACtBW,qBAAsB,CAAE5Q,QAAS,MACjC6Q,UAAS,UAAKX,GACdY,yBAA0B,CAAE9Q,QAAS,WAE1C,sBAAI6H,MAAO,CAAE0E,OAAQ,WAAYvJ,MAAO,SACxC,gBAACrC,EAAA,EAAD,CAAaxB,UAAWD,EAAQsQ,SAC/B,gBAAC5O,EAAA,EAAD,CAAQmQ,KAAK,QAAQ9Q,MAAM,UAAUY,QAnCd,WACP,kBAAZoP,EACFG,EAAa,wBAAyB,CAAEY,cAAed,EAASe,uBAAwBjB,EAAWkB,yBAC9E,qBAAZjB,EACTG,EAAa,gBAAiB,CAAEe,qBAAsB,EAAGC,cAAe,kCAExEjB,EAAU,CACRkB,OAAQnB,EACRoB,aAAc,qCACdC,QAASvB,EAAWuB,UAEtBnB,EAAa,YAAa,CAAEiB,OAAQnB,EAASoB,aAAc,qCAAsCC,QAASvB,EAAWuB,aAyBtH,gBAACC,GAAA,EAAD,MADD,WAIA,gBAAC5Q,EAAA,EAAD,CAAQmQ,KAAK,QAAQ9Q,MAAM,UAAUY,QAxBd,WACP,kBAAZoP,EACFpO,QAAQC,IAAI,+FACS,qBAAZmO,EACTpO,QAAQC,IAAI,kGAEZsO,EAAa,YAAa,CAAEiB,OAAQnB,EAASoB,aAAc,yCAmB5D,gBAACG,GAAA,EAAD,MADD,eCrCEC,G,iLAiBO,IAAD,EACuD1S,KAAKX,MAA5Da,EADA,EACAA,QAASyS,EADT,EACSA,kBAAmBC,EAD5B,EAC4BA,cAAeC,EAD3C,EAC2CA,QAEnD,OACE,uBAAK1S,UAAWD,EAAQE,MACtB,gBAAC6C,EAAA,EAAD,CAAO9C,UAAWD,EAAQgD,OACxB,gBAACpC,EAAA,EAAD,CAAYE,QAAQ,MAApB,WAGA,gBAACF,EAAA,EAAD,CAAYE,QAAQ,QAAQD,cAAc,GAA1C,uIAIA,2BACC6R,EACC,gBAAC9R,EAAA,EAAD,CAAYE,QAAQ,YAAYD,cAAc,GAA9C,0BAIA6R,GAAiBD,EACjB,2BACE,gBAAC7R,EAAA,EAAD,CAAYE,QAAQ,YAAYD,cAAc,GAA9C,kBAIA,gBAAC,GAAD,CAAemQ,QAASyB,EAAkBX,cAAef,QAAS,mBAGlE2B,GAAiBD,GAAqBE,EACtC,gBAAC1P,EAAA,EAAD,KAEI0P,EAAQxP,IAAI,SAACG,EAAUD,GAAX,OAEV,gBAAC,IAAD,CACEC,IAAG,UAAKD,EAAL,YACHE,OAAQ,gBAAG7D,EAAH,EAAGA,QAAH,OACN,gBAAC8D,EAAA,EAAD,CAAUF,IAAKD,EAAOK,QAAQ,EAAM/B,QAAS,WAAQjC,EAAQC,KAAR,mBAAyB2D,EAAIyN,YAChF,gBAACnN,EAAA,EAAD,CAAcnF,QAAS6E,EAAIyN,UAC3B,gBAAC,GAAD,CAAeC,QAAS1N,EAAI0N,QAASD,QAASzN,EAAIyN,iBAQ9D2B,GAAiBD,IAAsBE,EACzC,gBAAC/R,EAAA,EAAD,CAAYE,QAAQ,YAAYD,cAAc,GAA9C,+BAKA,4BACE,gBAACD,EAAA,EAAD,CAAYE,QAAQ,YAAYD,cAAc,GAA9C,6CAGA,gBAACD,EAAA,EAAD,CAAYE,QAAQ,YAAYD,cAAc,GAA9C,yF,GAzEgBe,aAoFf3C,KAAS4C,YAtHT,SAAC,GAAD,IAAGgC,EAAH,EAAGA,QAAH,OAAwB/B,YAAa,CAClD5B,KAAM,CACJ6G,UAAW,OACXC,WAAYnD,EAAQ,IAEtBb,MAAO,CACLe,QAASF,EAAQ,OAgHGhC,CAAmB2Q,KC1H9BI,GAAgBxQ,6CAAkC,YAA2B,OAAQ,kBAErFyQ,GAAqBzQ,6CAAkC,YAA0D,OAAQ,aAMzH0Q,IAJwB1Q,6CAAkC,YAAiF,OAAQ,gBAEnIA,6CAAkC,YAAiF,OAAQ,kBAE3HA,6CAAkC,YAA8B,OAAQ,mBAExF2Q,GAAa3Q,6CAAkC,YAAkC,OAAQ,gBAEzF4Q,GAAY5Q,6CAAkC,YAAkF,OAAQ,cAExI6Q,GAAY7Q,6CAAkC,YAAgE,OAAQ,cCqBpHC,IDjBYD,6CAAgD,QAAS,QAAS,OAEjEA,6CAAmD,QAAS,QAAS,QCelFC,YAzBS,SAAC5C,GACvB,MAAO,CACLiT,cAAejT,EAAMyT,QAAQR,cAC7BD,kBAAmBhT,EAAMyT,QAAQT,kBACjCU,iBAAkB1T,EAAMyT,QAAQC,iBAChCR,QAASlT,EAAMyT,QAAQE,QAAQT,UAIR,SAACrQ,GAAD,MAAwC,CAEjE+Q,mBAAoB,kBAAM/Q,EAASsQ,GAAcpQ,OAAO,MACxD8Q,qBAAsB,kBAAMhR,EAASuQ,GAAmBrQ,OAAO,MAG/D+Q,gBAAiB,kBAAMjR,EAASwQ,GAActQ,OAAO,MACrDgR,aAAc,kBAAMlR,EAASyQ,GAAWvQ,OAAO,MAC/CyO,UAAW,SAACwC,GAAD,OAAqBnR,EAAS0Q,GAAUxQ,OAAOiR,KAC1DC,UAAW,SAACD,GAAD,OAAqBnR,EAAS2Q,GAAUzQ,OAAOiR,OAO7CpR,CAGbmQ,KCnBImB,GAAYC,YAAW,SAAAtV,GAAK,MAAK,CACrC4B,KAAM,CACJ6B,QAAS,QAEX8R,OAAO,eACJvV,EAAMwV,YAAYC,GAAG,MAAQ,CAC5BjQ,MARc,IASdkQ,WAAY,IAGhBC,OAAO,aACLpE,WAbgB,KAcfvR,EAAMwV,YAAYC,GAAG,MAAQ,CAC5BjQ,MAAM,eAAD,OAfS,IAeT,SAGToQ,WAAW,aACTjN,YAAa3I,EAAMuF,QAAQ,IAC1BvF,EAAMwV,YAAYC,GAAG,MAAQ,CAC5BhS,QAAS,SAGboS,QAAS7V,EAAM8V,OAAOD,QACtBE,YAAa,CACXvQ,MA1BgB,KA4BlBwQ,QAAS,CACP7H,SAAU,EACV1I,QAASzF,EAAMuF,QAAQ,OA8IZ0Q,OA1If,SAAoBpV,GAAQ,IAClB2M,EAAc3M,EAAd2M,UACF9L,EAAU2T,KACVrV,EAAQkW,cAHW,EAIW5S,IAAM6S,UAAS,GAJ1B,mBAIlBC,EAJkB,KAINC,EAJM,KAMzB,SAASC,IACPD,GAAeD,GAGjB,SAASG,EAAoBnV,EAASoV,GACpCpV,EAAQC,KAAKmV,GACbH,GAAeD,GAGjB,IAAMb,EACJ,6BACE,yBAAK5T,UAAWD,EAAQmU,UACxB,kBAAClR,EAAA,EAAD,KACI,kBAAC,IAAD,CAAOM,OAAQ,gBAAG7D,EAAH,EAAGA,QAAH,OACb,6BACE,kBAAC8D,EAAA,EAAD,CAAUE,QAAM,EAAC/B,QAAS,WAAQkT,EAAoBnV,EAAQ,cAC5D,kBAACiE,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcnF,QAAQ,cAExB,kBAAC+E,EAAA,EAAD,CAAUE,QAAM,EAAC/B,QAAS,WAAQkT,EAAoBnV,EAAS,eAC7D,kBAACiE,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcnF,QAAQ,cAExB,kBAAC+E,EAAA,EAAD,CAAUE,QAAM,EAAC/B,QAAS,WAAQkT,EAAoBnV,EAAQ,eAC5D,kBAACiE,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcnF,QAAQ,cAExB,kBAAC+E,EAAA,EAAD,CAAUE,QAAM,EAAC/B,QAAS,WAAQkT,EAAoBnV,EAAQ,YAC5D,kBAACiE,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAcnF,QAAQ,iBAQpC,OACE,yBAAKwB,UAAWD,EAAQE,MACtB,kBAACb,EAAA,EAAD,MACA,kBAAC0V,EAAA,EAAD,CAAQrI,SAAS,QAAQzM,UAAWD,EAAQiU,QAC1C,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACElU,MAAM,UACNmU,aAAW,cACXC,KAAK,QACLxT,QAASiT,EACT3U,UAAWD,EAAQkU,YAEnB,kBAAC,IAAD,OAEF,kBAACtT,EAAA,EAAD,CAAYE,QAAQ,KAAKsU,QAAM,GAA/B,gCAKJ,yBAAKnV,UAAWD,EAAQ6T,OAAQqB,aAAW,mBAEzC,kBAACG,EAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1B,kBAACC,EAAA,EAAD,CACE1J,UAAWA,EACXhL,QAAQ,YACR2U,OAA4B,QAApBnX,EAAMoX,UAAsB,QAAU,OAC9C9P,KAAM8O,EACNnO,QAASqO,EACT5U,QAAS,CACPgD,MAAOhD,EAAQqU,aAEjBsB,WAAY,CACVC,aAAa,IAGd/B,IAGL,kBAACwB,EAAA,EAAD,CAAQQ,QAAM,EAACN,eAAe,OAC5B,kBAACC,EAAA,EAAD,CACExV,QAAS,CACPgD,MAAOhD,EAAQqU,aAEjBvT,QAAQ,YACR8E,MAAI,GAEHiO,KAIP,0BAAM5T,UAAWD,EAAQsU,SACvB,yBAAKrU,UAAWD,EAAQmU,UACxB,kBAAC,IAAD,CAAO2B,OAAK,EAAChB,KAAK,SAASpU,MAAM,OAAO6C,OAAQ,SAAApE,GAAK,OACnD,6BACE,kBAAC,EAAmBA,OAGxB,kBAAC,IAAD,CAAO2V,KAAK,YAAYxU,UAAWyV,KACnC,kBAAC,IAAD,CAAOjB,KAAK,iBAAiBxU,UAAW0V,KACxC,kBAAC,IAAD,CAAOlB,KAAK,YAAYxU,UAAW2V,KACnC,kBAAC,IAAD,CAAOH,OAAK,EAAChB,KAAK,iBAAiBvR,OAAS,SAAApE,GAAK,OAC/C,kBAAC,GAAqBA,MAExB,kBAAC,IAAD,CAAO2W,OAAK,EAAChB,KAAK,4BAA4BvR,OAAS,SAAApE,GAAK,OAC1D,kBAAC,GAAqBA,MAExB,kBAAC,IAAD,CAAO2V,KAAK,WAAWxU,UAAW4V,KAClC,kBAAC,IAAD,CAAOJ,OAAK,EAAChB,KAAK,IAAIvR,OAAS,SAAApE,GAAK,OAClC,6BACE,kBAAC,GAAsBA,GACvB,kBAAC,GAAsBA,GACvB,kBAAC,GAA6BA,U,SCvK3BgX,GARF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,gBAAC,IAAD,CAAUA,MAAOA,GACf,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAOtB,KAAK,IAAIxU,UAAWiU,Q,+OCE1B,IAAM8B,GAAsB,CACjCC,UAAU,GAiBGC,oBAAgB,CAC7B/W,MAfK,WAA+E,IAAxDC,EAAuD,uDAAnC4W,GAAclF,EAAqB,uCACnF,OAAQA,EAAOtH,MACb,KAAK2M,mBAAQC,EAAmBC,SAG9B,OAFA/T,QAAQC,IAAIuO,G,uVAEL,IACF1R,EADL,CAEE6W,SAHenF,EAAOwF,UAK1B,QACE,OAAOlX,M,ujBCDN,IAAM4W,GAAsB,CACjCnG,SAAU,GACVE,oBAAgB5E,EAEhB1I,SAAU,GACVmD,oBAAgBuF,GAyCH+K,oBAAgB,CAC7B5R,QAvCK,WAA+E,IAAxDlF,EAAuD,uDAAnC4W,GAAclF,EAAqB,uCACnF,OAAQA,EAAOtH,MACb,KAAK2M,mBAAQI,GAAyBF,SACpC/T,QAAQC,IAAIuO,GACZ,IAAIrO,EAAWqO,EAAOwF,QAAQxT,IAAI,SAAC0T,GAAgB,OAAO,MAAKA,EAAKC,MAAjB,CAAwBrT,KAAMoT,EAAK7F,YAElF/K,EAAiBnD,EAASyE,OAAO,SAACnE,GAAD,MAAuC,YAAjBA,EAAQnC,OAAoB,IAAM6B,EAAS,SAAM0I,EAE5G,OAAO,MACF/L,EADL,CAEEqD,WACAmD,mBAEJ,KAAKuQ,mBAAQI,GAAyBF,SACpC,OAAO,MACFjX,EADL,CAEEyQ,SAAUiB,EAAOwF,QAAQxT,IAAI,SAACwB,GAC5B,IAAMW,EAASX,EAAQW,OAAOnC,IAAI,SAAC2B,GACjC,OAAO,MAAKA,EAAZ,CAAmBoF,QAASpF,EAAMoF,QAAUpF,EAAMoF,aAAUsB,MAE9D,OAAO,MAAK7G,EAAZ,CAAqBW,eAG3B,KAAKkR,mBAAQI,IACX,OAAO,MACFnX,EADL,CAEEwG,eAAgBkL,EAAOwF,UAE3B,KAAKH,mBAAQI,IACX,OAAO,MACFnX,EADL,CAEE2Q,eAAgBe,EAAOwF,UAE3B,QACE,OAAOlX,M,ujBCjDN,IAAM4W,GAAsB,CACjC3D,eAAe,EACfD,uBAAmBjH,EACnB2H,sBAAkB3H,EAClBmH,QAAS,IAsCI4D,IChDXQ,GDgDWR,gBAAgB,CAC7BnD,QApCK,WAAiF,IAA5D3T,EAA2D,uDAArC4W,GAAclF,EAAuB,uCACrF,OAAQA,EAAOtH,MACb,KAAK2M,mBAAQQ,GAA4BN,SAEvC,OADA/T,QAAQC,IAAI,+BAAgCuO,EAAOwF,SAC5C,MACFlX,EADL,CAEEiT,cAAevB,EAAOwF,UAG1B,KAAKH,mBAAQQ,GAAiCN,SAE5C,OADA/T,QAAQC,IAAI,8BAA+BuO,EAAOwF,SAC3C,MACFlX,EADL,CAEEgT,kBAAmBtB,EAAOwF,QAAQ,GAAGG,QAGzC,KAAKN,mBAAQQ,GAA4BN,SAEvC,OADA/T,QAAQC,IAAI,oBAAqBuO,EAAOwF,SACjC,MACFlX,EADL,CAEEwX,iBAAkB9F,EAAOwF,QAAQ,GAAGG,QAGxC,KAAKN,mBAAQQ,GAAyBN,SAEpC,OADA/T,QAAQC,IAAI,kBAAmBuO,EAAOwF,SAC/B,MACFlX,EADL,CAEEkT,QAASxB,EAAOwF,UAGpB,QACE,OAAOlX,MC9CPyX,GAAqCC,8CAAYD,mCACnDE,GAAcb,aAAgB,CAAE/W,MAAOA,GAAOoF,iBAAkBA,GAAkBsO,QAASA,KAG7F6D,GADEG,GACW,CAACG,8BAAoBhV,mBAAQ,CAAEiV,IAAKJ,OAEpC,CAACG,8BAAoBhV,uBAGpC,IAAMkV,GAAmBxI,OAAOyI,sCAAwCC,KAWzDC,ICvBTtB,GDcN,WACE,OAAOuB,aACNP,GACAG,GACGK,KAAe,WAAf,eAAmBb,OClBXW,GAEdG,SAAgB,gBAAC,GAAD,CAAMzB,MAAOA,KAAW0B,SAASC,cAAc,Y","file":"static/js/main.23280086.chunk.js","sourcesContent":["import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './theme';\n\nfunction withRoot (Component: any) {\n  function WithRoot (props: any) {\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Component {...props} />\n      </ThemeProvider>\n    )\n  }\n  return WithRoot\n}\n\nexport default withRoot\n","import * as React from 'react'\nimport withRoot from '../../../withRoot'\nimport { createStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport { Login as LoginType } from '../types/login'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography';\n\nexport interface OwnProps {\n  classes?: any\n}\nexport interface RouterProps extends RouteComponentProps<{}> {}\nexport interface StateProps {\n  title: string\n}\nexport interface DispatchProps {\n  login: (login: LoginType) => void\n}\n\nexport type Props = OwnProps & StateProps & DispatchProps\n\nexport interface State {\n  login: LoginType\n}\n\nconst styles = ({ palette }: Theme) => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: palette.background.default,\n    color: palette.primary.main,\n  }\n})\n\nclass LoginForm extends React.Component<Props & RouterProps, State> {\n\n  constructor (props: Props & RouterProps) {\n    super(props)\n    this.state = {\n      login: {\n        email: '',\n        password: ''\n      }\n    }\n  }\n\n  handleSubmit = () => {\n    this.props.login(this.state.login)\n    this.props.history.push('/')\n  }\n\n  updateEmail (email: string) {\n    this.setState({\n      login: {\n        ...this.state.login,\n        email: email\n      }\n    })\n  }\n\n  updatePassword (password: string) {\n    this.setState({\n      login: {\n        ...this.state.login,\n        password: password\n      }\n    })\n  }\n\n  render () {\n    const { classes } = this.props\n    return (\n      <div className={classes.root}>\n        <Card className={classes.card}>\n          <CardMedia\n            component=\"img\"\n            alt=\"Holo Logo\"\n            height=\"240\"\n            image=\"holo-dots.png\"\n            title=\"Holo Logo\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              Generate Your Holo Keys\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Welcome to the Agent Centric Web where you are in control of your personal data.\n            Use the same email password combination to access all of your Holo Apps and keep your\n            personal data safe and private.\n            </Typography>\n            <div>\n              <TextField name='email' value={this.state.login.email} onChange={e => this.updateEmail(e.target.value)} label='Email'/>\n              <TextField name='password' value={this.state.login.password} onChange={e => this.updatePassword(e.target.value)} label='Password'/>\n            </div>\n          </CardContent>\n          <CardActions>\n            <Button name='submit' onClick={() => this.handleSubmit()} color='primary'>\n              Log In\n            </Button>\n          </CardActions>\n        </Card>\n      </div>\n    )\n  }\n}\nexport default withRoot(withStyles(styles)(withRouter(LoginForm)))\n","import { createHolochainZomeCallAsyncAction } from '@holochain/hc-redux-middleware'\nimport { Login as LoginType } from './types/login'\n\nexport const Login = createHolochainZomeCallAsyncAction<{spec: LoginType}, string>('personas-profiles', 'login', 'login')\n","import { connect } from 'react-redux'\nimport LoginForm, { StateProps, DispatchProps } from '../components/login'\nimport { Dispatch } from 'redux'\nimport {\n  Login\n} from '../actions'\n\nconst mapStateToProps = (): StateProps => {\n  return {\n    title: `Login`\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    login: (loginSpec) => dispatch(Login.create({ spec: loginSpec }))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LoginForm)\n","import * as React from 'react'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { withRouter, Route, RouteComponentProps } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Person from '@material-ui/icons/Person'\nimport PersonAdd from '@material-ui/icons/PersonAdd'\nimport withRoot from '../../../../withRoot'\nimport { Persona as PersonaType } from '../../types/persona'\n\nconst styles = ({ spacing, palette }: Theme) => createStyles({\n  root: {\n    width: '100%',\n    backgroundColor: palette.background.paper\n  },\n  paper: {\n    padding: spacing(1)\n  }\n})\n\nexport interface OwnProps {\n  classes?: any\n}\n\nexport interface StateProps {\n  personas: Array<PersonaType>\n}\n\nexport interface DispatchProps {\n  getPersonas: Function\n}\n\nexport interface RouterProps extends RouteComponentProps<{}> {}\n\nexport type Props = OwnProps & StateProps & DispatchProps\n\nclass Personas extends React.Component<Props & RouterProps, {}> {\n  componentDidMount () {\n    console.log('get personas')\n    this.props.getPersonas()\n  }\n\n  // tslint:disable jsx-no-lambda\n  render () {\n    const { classes, personas } = this.props\n    return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Typography variant='h4'>\n          Personas\n        </Typography>\n        <Typography variant='body1' gutterBottom={true}>\n          Look after your personal information here, click on a Persona to update or click Add Persona to create a new one.\n        </Typography>\n        <List id='personas' component='nav'>\n          {\n            personas.map((persona: PersonaType, index: number) => (\n              <Route key={index}\n                render={({ history }) => (\n                  <ListItem key={index}\n                    id={persona.hash}\n                    button={true}\n                    onClick={() => {\n                      history.push(`/persona/${persona.name}`)\n                    }}\n                  >\n                    <ListItemIcon>\n                      <Person/>\n                    </ListItemIcon>\n                  <ListItemText primary={persona.name}/>\n                  </ListItem>)}\n              />))\n          }\n        </List>\n        <Route\n          render={({ history }) => (\n            <Button\n              name='addPersona'\n              color='primary'\n              onClick={() => {\n                history.push(`/persona/new`)\n              }}\n            >\n              <PersonAdd/>\n              Add Persona\n            </Button>)}\n        />\n      </Paper>\n    </div>)\n  }\n}\n\nexport default withRoot(withStyles(styles)(withRouter(Personas)))\n","import { createHolochainZomeCallAsyncAction } from '@holochain/hc-redux-middleware'\nimport { createAction } from 'typesafe-actions'\n\nimport { Persona, PersonaSpec, PersonaField } from './types/persona'\nimport { ProfileMapping, Profile } from './types/profile'\n\n/*----------  Persona Actions  ----------*/\n\nexport const CreatePersona = createHolochainZomeCallAsyncAction<{spec: PersonaSpec}, string>('personas-profiles', 'personas', 'create_persona')\n\nexport const UpdatePersona = createHolochainZomeCallAsyncAction<{persona_address: string, spec: PersonaSpec}, string>('personas-profiles', 'personas', 'update_persona')\n\nexport const DeletePersona = createHolochainZomeCallAsyncAction<{persona_address: string}, null>('personas-profiles', 'personas', 'delete_persona')\n\nexport const GetPersonas = createHolochainZomeCallAsyncAction<{}, Array<{address: string, entry: Persona}>>('personas-profiles', 'personas', 'get_personas')\n\nexport const AddField = createHolochainZomeCallAsyncAction<{persona_address: string, field: PersonaField}, null>('personas-profiles', 'personas', 'add_field')\n\n/*----------  Profile Actions  ----------*/\n\nexport const GetProfiles = createHolochainZomeCallAsyncAction<{}, Array<Profile>>('personas-profiles', 'profiles', 'get_profiles')\n\nexport const CreateMapping = createHolochainZomeCallAsyncAction<{mapping: ProfileMapping}, {mappings_created: number}>('personas-profiles', 'profiles', 'create_mapping')\n\n/*----------  non holochain actions  ----------*/\n\nexport const SetCurrentPersona = createAction('holo-vault/SET_CURRENT_PERSONA', resolve => {\n  return (persona: Persona) => resolve(persona)\n})\n\nexport const SetCurrentProfile = createAction('holo-vault/SET_CURRENT_PROFILE', resolve => {\n  return (profile: Profile) => resolve(profile)\n})\n","\nimport { connect } from 'react-redux'\nimport Personas, { OwnProps, StateProps, DispatchProps } from '../components/persona/personas'\nimport { Dispatch } from 'redux'\n\nimport {\n  GetPersonas\n} from '../actions'\n\nconst mapStateToProps = (state: any): StateProps => {\n  return {\n    personas: state.personasProfiles.profile.personas\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    getPersonas: () => dispatch(GetPersonas.create({})) // can be written as  () => { return dispatch(...) }\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(Personas)\n","import * as React from 'react'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport withRoot from '../../../../withRoot'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\nimport { PersonaField as PersonaFieldType, Persona as PersonaType, PersonaSpec } from '../../types/persona'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport PersonAdd from '@material-ui/icons/PersonAdd'\nimport PersonOutline from '@material-ui/icons/PersonOutline'\nimport TextFields from '@material-ui/icons/TextFields'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { GetPersonas } from '../../actions'\n\nexport interface RouterProps extends RouteComponentProps<{name: string}> {}\n\nexport interface OwnProps {\n  classes?: any\n}\n\nexport interface StateProps {\n  currentPersona: PersonaType,\n  title: string,\n  personas: Array<PersonaType>\n}\n\nexport interface DispatchProps {\n  create: (personaSpec: PersonaSpec, personaFields: Array<PersonaFieldType>) => Promise<any>,\n  update: (personaAddress: string, personaSpec: PersonaSpec, personaFields: Array<PersonaFieldType>) => Promise<any>,\n  delete: (personaAddress: string) => Promise<any>,\n  getPersonas: typeof GetPersonas.sig\n}\n\nexport type Props = OwnProps & StateProps & DispatchProps\n\nexport interface State {\n  persona: PersonaType,\n  open: boolean\n}\n\nconst styles = ({ spacing }: Theme) => createStyles({\n  root: {\n    textAlign: 'left',\n    paddingTop: spacing(1)\n  },\n  button: {\n    marginRight: spacing(1),\n    marginTop: spacing(1)\n  },\n  paper: {\n    padding: spacing(1)\n  }\n})\n\nfunction PersonaField (props: {index: number, field: PersonaFieldType, onChange: (updatedField: PersonaFieldType) => void}) {\n\n  const onChangeName = (newName: string): void => {\n    props.onChange({\n      ...props.field,\n      name: newName\n    })\n  }\n\n  const onChangeData = (newData: string): void => {\n    props.onChange({\n      ...props.field,\n      data: newData\n    })\n  }\n\n  return (\n    <div>\n      <TextField name={`fieldName${props.index}`} label='Field Name' value={props.field.name} onChange={(e) => onChangeName(e.target.value)} />\n      <TextField name={`fieldValue${props.index}`} label='Field Value' value={props.field.data} onChange={(e) => onChangeData(e.target.value)} />\n    </div>\n  )\n}\n\nclass Persona extends React.Component<Props & RouterProps, State> {\n\n  constructor (props: Props & RouterProps) {\n    super(props)\n    this.state = {\n      open: false,\n      persona: {\n        name: '',\n        hash: '',\n        fields: []\n      }\n    }\n  }\n\n  handleSubmit = () => {\n    const personaSpec: PersonaSpec = { 'name': this.state.persona.name }\n    const personaFields: Array<PersonaFieldType> = this.state.persona.fields\n    if (this.state.persona.hash === '') {\n      this.props.create(personaSpec, personaFields)\n        .then(this.props.getPersonas)\n        .catch(err => console.log(err))\n    } else {\n      this.props.update(this.state.persona.hash, personaSpec, personaFields)\n        .then(this.props.getPersonas)\n        .catch(err => console.error(err))\n    }\n    this.props.history.push('/personas')\n  }\n\n  handleConfirmDelete = () => {\n    this.setState({\n      open: true\n    })\n  }\n\n  handleDelete = () => {\n    this.setState({\n      open: false\n    })\n    this.props.delete(this.state.persona.hash)\n      .then(this.props.getPersonas)\n      .catch(err => console.error(err))\n    this.props.history.push('/personas')\n  }\n\n  handleCloseDialog = () => {\n    this.setState({\n      open: false\n    })\n  }\n\n  handleAddPersonaField = () => {\n    this.setState({\n      persona: {\n        ...this.state.persona,\n        fields: [...this.state.persona.fields, { 'name': '', 'data': '' }]\n      }\n    })\n  }\n\n  componentDidMount () {\n    this.props.getPersonas({})\n      .catch((err) => console.log(err))\n    this.setState({\n      open: false,\n      persona: this.props.currentPersona\n    })\n  }\n\n  static getDerivedStateFromProps (nextProps: Props & RouterProps, prevState: State) {\n    if (!prevState.persona) {\n      return {\n        persona: nextProps.currentPersona\n      }\n    } else {\n      return null\n    }\n  }\n\n  updateField (newField: PersonaFieldType, index: number) {\n    const fields = this.state.persona.fields\n    this.setState({\n      persona: {\n        ...this.state.persona,\n        fields: [...fields.slice(0, index), newField, ...fields.slice(index + 1)]\n      }\n    })\n  }\n\n  updateName (newName: string) {\n    this.setState({\n      persona: {\n        ...this.state.persona,\n        name: newName\n      }\n    })\n  }\n\n  render () {\n    const { classes } = this.props\n\n    if (!this.state.persona) {\n      return (\n        <div>\n          <CircularProgress/>\n        </div>\n      )\n    }\n\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <Typography variant='h4'>\n            Manage Your Personas\n          </Typography>\n          <Typography variant='body1' gutterBottom={true}>\n            You can add a new Persona and add as many fields to it as you like. You will probably have a *Default*, *Work* and a *Friends* persona.\n          </Typography>\n            <div>\n              <TextField name='personaName' value={this.state.persona.name} onChange={e => this.updateName(e.target.value)} label='Persona Name'/>\n            </div>\n            {this.state.persona.fields.map((field: PersonaFieldType, index: number) => (<PersonaField key={index} index={index} field={field} onChange={(newField: PersonaFieldType) => this.updateField(newField, index)}/>))}\n            <Button name='addField' color='primary' onClick={this.handleAddPersonaField}>\n              <TextFields/>\n              Add Field\n            </Button>\n            <Button name='submitPersona' color='primary' onClick={() => this.handleSubmit()}>\n              <PersonAdd/>\n              {this.state.persona.hash === '' ? 'Create Persona' : 'Update Persona'}\n            </Button>\n            <Button name='deletePersona' color='primary' onClick={() => this.handleConfirmDelete()}>\n              <PersonOutline/>\n              Delete Persona\n            </Button>\n            <Dialog open={this.state.open} onClose={this.handleCloseDialog}>\n              <DialogTitle id='alert-dialog-slide-title'>\n                Delete {this.state.persona.name} Persona?\n              </DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  Agreeing will delete this Persona.\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleCloseDialog} color='primary'>\n                  Cancel\n                </Button>\n                <Button id='Agree' onClick={this.handleDelete} color='primary'>\n                  Delete\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </Paper>\n      </div>\n    )\n  }\n}\n\nexport { Persona as PersonaBase }\nexport default withRoot(withStyles(styles)(withRouter(Persona)))\n","import { JSONSchema6 } from 'json-schema'\n\n/*----------  Created by the hApp  ----------*/\n\nexport interface ProfileSpec {\n  name: string,\n  sourceDna: string, // the DNA of the hApp requesting data\n  fields: Array<ProfileFieldSpec>, // array of fields this app requires\n}\n\nexport interface ProfileFieldSpec {\n  name: string, // How the app will ask for this data\n  displayName: string, // How it will be displayed in user forms\n  required: boolean,\n  description: string, // describes what the app will do with this data\n  usage: UsageType, // how the app will use the data.\n  schema: JSONSchema6 // field must pass this validator to be accepted\n}\n\nexport enum UsageType {\n  STORE= 'STORE',    // The app will store the data in its own DHT\n  DISPLAY= 'DISPLAY' // The app will always bridge to vault when it needs to retreive the data\n}\n\n/*-------------------------------------------*/\n\nexport interface ProfileMapping {\n  retrieverDna: string,\n  profileFieldName: string,\n  personaAddress: string,\n  personaFieldName: string\n}\n\nexport interface Profile extends ProfileSpec {\n  hash: string\n  fields: Array<ProfileField>,\n  expiry: Number, // expiry date as a unix timestamp\n}\n\nexport interface ProfileField extends ProfileFieldSpec {\n  mapping?: {\n    personaAddress: string,\n    personaFieldName: string\n  } // id of the persona to map to. If not provided then an error will be thrown on access\n}\n","import { connect } from 'react-redux'\nimport Persona, { Props, StateProps, DispatchProps, RouterProps } from '../components/persona/persona'\nimport { Dispatch } from 'redux'\nimport { PersonaField, Persona as PersonaType, PersonaSpec } from '../types/persona'\nimport {\n  CreatePersona,\n  UpdatePersona,\n  DeletePersona,\n  AddField,\n  GetPersonas\n} from '../actions'\n\nconst mapStateToProps = (state: any, ownProps: Props & RouterProps): StateProps => {\n\n  const personaName = ownProps.match.params.name\n  let persona: PersonaType\n\n  if (personaName === 'new') {\n    persona = {\n      name: '',\n      hash: '',\n      fields: []\n    }\n  } else {\n    persona = state.personasProfiles.profile.personas.filter(function (persona: PersonaType) {\n      return personaName === persona.name\n    })[0]\n  }\n\n  return {\n    title: `Persona - ${personaName}`,\n    currentPersona: persona,\n    personas: state.personasProfiles.profile.personas\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    getPersonas: () => dispatch(GetPersonas.create({})),\n    create: (personaSpec: PersonaSpec, personaFields: Array<PersonaField>) => {\n      return dispatch(CreatePersona.create({ spec: personaSpec }))\n        .then((personaAddress: string) => {\n          return Promise.all(\n            personaFields.map((field: PersonaField) => {\n              return dispatch(AddField.create({ persona_address: personaAddress, field }))\n            })\n          )\n        }\n      )\n    },\n    update: (personaAddress: string, personaSpec: PersonaSpec, personaFields: Array<PersonaField>) => {\n      return dispatch(UpdatePersona.create({ persona_address: personaAddress, spec: personaSpec }))\n        .then((updatedPersonaAddress: string) => {\n          return Promise.all(\n            personaFields.map((field: PersonaField) => {\n              return dispatch(AddField.create({ persona_address: updatedPersonaAddress, field }))\n            })\n          )\n        }\n      )\n    },\n    delete: (personaAddress: string) => {\n      return dispatch(DeletePersona.create({ persona_address: personaAddress }))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Persona)\n","import * as React from 'react'\nimport { TextField } from '@material-ui/core/'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Autosuggest from 'react-autosuggest'\nimport { Part as PartType } from '../../types/part'\nimport { Suggestion as SuggestionType } from '../../types/suggestion'\nimport { Persona as PersonaType, PersonaField as PersonaFieldType } from '../../types/persona'\nimport { ProfileField, Profile as ProfileType, UsageType } from '../../types/profile'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Save from '@material-ui/icons/Save'\nimport Dvr from '@material-ui/icons/Dvr'\n\nconst match = require('autosuggest-highlight/match')\nconst parse = require('autosuggest-highlight/parse')\nconst styles = ({ spacing }: Theme) => createStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  formControl: {\n    background: 'red'\n  },\n  inputLabel: {\n    color: '#8d97a5',\n    fontSize: 12\n  },\n  menuItem: {\n    fontFamily: 'Roboto',\n    fontSize: 14,\n    height: 16\n  },\n  selectEmpty: {\n    background: '#fff',\n    marginTop: spacing(2)\n  },\n  suggestion: {\n    display: 'block'\n  },\n  suggestionsContainerOpen: {\n    left: 0,\n    marginTop: spacing(1),\n    position: 'absolute',\n    right: 0,\n    zIndex: 1\n  },\n  suggestionsList: {\n    listStyleType: 'none',\n    margin: 0,\n    padding: 0\n  },\n  persona: {\n    float: 'right'\n  }\n})\n\nlet allSuggestions: Array<SuggestionType> = []\n\nfunction renderSuggestion (suggestion: SuggestionType, { query, isHighlighted }: { query: any; isHighlighted: boolean }) {\n  const matches = match(suggestion.label, query)\n  const parts: Array<PartType> = parse(suggestion.label, matches)\n\n  return (\n    <MenuItem selected={isHighlighted} component='div'>\n      <div>\n        {parts.map((part: PartType, index: number) => {\n          return part.highlight ? (\n            <span key={String(index)} style={{ fontWeight: 300 }}>\n              {part.text}\n            </span>\n          ) : (\n            <strong key={String(index)} style={{ fontWeight: 500 }}>\n              {part.text}\n            </strong>\n          )\n        })}\n      </div>\n    </MenuItem>\n  )\n}\n\nfunction getSuggestionValue (suggestion: SuggestionType) {\n  return suggestion.label\n}\n\nfunction renderSuggestionsContainer (options: any) {\n  const { children } = options\n  return (\n    <Paper {...options.containerProps} square={true}>\n      {children}\n    </Paper>\n  )\n}\n\nfunction getSuggestions (value: string) {\n  const inputValue = value.trim().toLowerCase()\n  const inputLength = inputValue.length\n  let count = 0\n  return inputLength === 0\n    ? []\n    : allSuggestions.filter(suggestion => {\n      const keep = count < 5 && suggestion.label.toLowerCase().slice(0, inputLength) === inputValue\n      if (keep) {\n        count += 1\n      }\n      return keep\n    })\n}\n\nexport interface OwnProps {\n  classes?: any\n}\n\nexport interface StateProps {\n  personas: Array<PersonaType>\n  selectedPersona: PersonaType\n  profile: ProfileType\n  field: ProfileField\n  handleMappingChange: any\n}\n\nexport type Props = OwnProps & StateProps\n\nexport interface State {\n  selectedPersona: PersonaType\n  suggestions: Array<SuggestionType>\n  field: ProfileField\n  value: string\n}\n\nfunction UsageIcon (props: any) {\n  switch (props.type) {\n    case UsageType.STORE:\n      return (<Tooltip title={props.reason}><Save/></Tooltip>)\n    default:\n      return (<Tooltip title={props.reason}><Dvr/></Tooltip>)\n  }\n}\n\nfunction Mapping (props: any) {\n  if (props.field.mapping) {\n    let mapping = props.field.mapping\n    let filteredPersonas = props.personas.filter(function (persona: PersonaType) {\n      return mapping.personaAddress === persona.hash\n    })\n    if (filteredPersonas.length > 0) {\n      let filteredData = filteredPersonas[0].fields.filter(function (field: ProfileField) {\n        return field.name === mapping.personaFieldName\n      })\n      if (filteredData.length > 0) {\n        return (<Typography className={props.classes.persona}>{filteredPersonas[0].name + ' - ' + mapping.personaFieldName}</Typography>)\n      } else {\n        return (<Typography className={props.classes.persona}>{props.selectedPersona.name + ' - ' + props.field.name}</Typography>)\n      }\n    } else {\n      return (<Typography className={props.classes.persona}>{props.selectedPersona.name + ' - ' + props.field.name}</Typography>)\n    }\n  } else {\n    let filteredSuggestions = allSuggestions.filter(function (suggestion: SuggestionType) {\n      return suggestion.field.name === props.field.name\n    })\n    if (filteredSuggestions.length > 0) {\n      return (<Typography className={props.classes.persona}>{filteredSuggestions[0].persona.name + ' - ' + filteredSuggestions[0].field.name}</Typography>)\n    } else {\n      return (<Typography className={props.classes.persona}>{props.selectedPersona.name + ' - ' + props.field.name}</Typography>)\n    }\n  }\n}\n\nclass AutoCompleteProfileField extends React.Component<Props, State> {\n  constructor (props: Props) {\n    super(props)\n    this.state = {\n      selectedPersona: props.selectedPersona,\n      suggestions: [],\n      value: '',\n      field: props.field\n    }\n  }\n\n  static getDerivedStateFromProps (nextProps: Props, prevState: State): any | null {\n    allSuggestions = []\n    nextProps.personas.map((persona: PersonaType) => (\n      persona.fields.map((field: PersonaFieldType) => (\n        allSuggestions.push({ persona: persona, field: field, label: field.data + ' (' + persona.name + ' - ' + field.name + ')' })\n      ))\n    ))\n    if (nextProps.field.mapping) {\n      let mapping = nextProps.field.mapping\n      if (nextProps.selectedPersona !== prevState.selectedPersona) {\n        let filteredField = nextProps.selectedPersona.fields.filter(function (field) {\n          return field.name === mapping.personaFieldName\n        })\n        if (filteredField.length > 0) {\n          mapping.personaAddress = nextProps.selectedPersona.hash\n        }\n      }\n      let filteredPersonas = nextProps.personas.filter(function (persona: PersonaType) {\n        return mapping.personaAddress === persona.hash\n      })\n      if (filteredPersonas.length > 0) {\n        let filteredData = filteredPersonas[0].fields.filter(function (field) {\n          return field.name === mapping.personaFieldName\n        })\n        if (filteredData.length > 0) {\n          return {\n            value: filteredData[0].data\n          }\n        }\n      }\n    }\n    return null\n  }\n\n  componentDidMount () {\n    if (!this.props.field.mapping) {\n      let field = this.state.field\n      let fieldName = this.props.field.name\n      let filteredSuggestions = allSuggestions.filter(function (suggestion: SuggestionType) {\n        return suggestion.field.name === fieldName\n      })\n      if (filteredSuggestions.length > 0) {\n        field.mapping = {\n          personaAddress: filteredSuggestions[0].persona.hash,\n          personaFieldName: filteredSuggestions[0].field.name\n        }\n        this.setState({\n          value: filteredSuggestions[0].field.data,\n          field: field\n        })\n      } else {\n        field.mapping = undefined\n        this.setState({\n          field: field\n        })\n      }\n    }\n  }\n\n  public renderInput = (inputProps: any) => {\n    const { classes, ref, ...other } = inputProps\n\n    return (\n      <div>\n        <TextField\n          fullWidth={true}\n          id='name'\n          name='name'\n          label={this.props.field.displayName}\n          InputProps={{\n            classes: {\n              input: classes.textfield\n            },\n            disableUnderline: false,\n            inputRef: ref,\n            ...other\n          }}\n        />\n      </div>\n    )\n  }\n\n  public handleChange = (event: any, newVal: any) => {\n    let newValue = newVal.newValue\n    let field = this.state.field\n    let selectedSuggestion = allSuggestions.filter(function (suggestion: SuggestionType) {\n      return newValue === suggestion.label\n    })\n    if (selectedSuggestion.length === 0) {\n      if (newVal.newValue.length > 0) {\n        field.mapping = {\n          personaAddress: this.props.selectedPersona.hash,\n          personaFieldName: this.props.field.name\n        }\n      } else {\n        field.mapping = undefined\n      }\n      this.setState({\n        value: newValue,\n        field: field\n      })\n    } else {\n      newValue = selectedSuggestion[0].field.data\n      field.mapping = {\n        personaAddress: selectedSuggestion[0].persona.hash,\n        personaFieldName: selectedSuggestion[0].field.name\n      }\n      this.setState({\n        value: newValue,\n        field: field\n      })\n    }\n  }\n\n  public handleSuggestionsFetchRequested = ({ value }: { value: any }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    })\n  }\n\n  public handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    })\n  }\n\n  public handleMappingChange = () => {\n    this.props.handleMappingChange(this.state.field, this.state.value)\n  }\n\n  public render () {\n    const { classes, field, profile, personas, selectedPersona } = this.props\n\n    return (\n      <div className={classes.root}>\n        <Autosuggest\n          id='selectedPersonaFieldValue'\n          theme={{\n            container: classes.container,\n            suggestion: classes.suggestion,\n            suggestionsContainerOpen: classes.suggestionsContainerOpen,\n            suggestionsList: classes.suggestionsList\n          }}\n          renderInputComponent={this.renderInput}\n          suggestions={this.state.suggestions}\n          onSuggestionsFetchRequested={this.handleSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.handleSuggestionsClearRequested}\n          renderSuggestionsContainer={renderSuggestionsContainer}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={{\n            classes,\n            onBlur: this.handleMappingChange,\n            onChange: this.handleChange,\n            value: this.state.value\n          }}\n        />\n        <UsageIcon type={field.usage} reason={field.description} className={classes.icon}/>\n        <Mapping classes={classes} profile={profile} field={this.state.field} personas={personas} selectedPersona={selectedPersona} />\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(AutoCompleteProfileField)\n","import * as React from 'react'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { TextField } from '@material-ui/core/'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Paper from '@material-ui/core/Paper'\nimport withRoot from '../../../../withRoot'\nimport { Profile, ProfileField } from '../../types/profile'\nimport { Persona as PersonaType, PersonaField as PersonaFieldType } from '../../types/persona'\nimport Person from '@material-ui/icons/Person'\nimport Autosuggest from 'react-autosuggest'\nimport { Part as PartType } from '../../types/part'\nimport AutoCompleteProfileField from './autoCompleteProfileField'\n\nconst match = require('autosuggest-highlight/match')\nconst parse = require('autosuggest-highlight/parse')\nconst styles = ({ spacing }: Theme) => createStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    flexGrow: 1,\n    width: '50%'\n  },\n  field: {\n    width: '50%'\n  },\n  inputLabel: {\n    color: '#8d97a5',\n    fontSize: 12\n  },\n  menuItem: {\n    fontFamily: 'Roboto',\n    fontSize: 14,\n    height: 16\n  },\n  selectEmpty: {\n    background: '#fff',\n    marginTop: spacing(2)\n  },\n  suggestion: {\n    display: 'block'\n  },\n  suggestionsContainerOpen: {\n    left: 0,\n    marginTop: spacing(1),\n    position: 'absolute',\n    right: 0,\n    zIndex: 1\n  },\n  suggestionsList: {\n    listStyleType: 'none',\n    margin: 0,\n    padding: 0\n  }\n})\n\nlet allPersonaSuggestions: Array<string> = []\n\nfunction renderSuggestion (suggestion: string, { query, isHighlighted }: { query: any; isHighlighted: boolean }) {\n  const matches = match(suggestion, query)\n  const parts: Array<PartType> = parse(suggestion, matches)\n\n  return (\n    <MenuItem selected={isHighlighted} component='div'>\n      <div>\n        {parts.map((part: PartType, index: number) => {\n          return part.highlight ? (\n            <span key={String(index)} style={{ fontWeight: 300 }}>\n              {part.text}\n            </span>\n          ) : (\n            <strong key={String(index)} style={{ fontWeight: 500 }}>\n              {part.text}\n            </strong>\n          )\n        })}\n      </div>\n    </MenuItem>\n  )\n}\n\nfunction getSuggestionValue (suggestion: string) {\n  return suggestion\n}\n\nfunction renderSuggestionsContainer (options: any) {\n  const { children } = options\n  return (\n    <Paper {...options.containerProps} square={true}>\n      {children}\n    </Paper>\n  )\n}\n\nfunction getSuggestions (value: string) {\n  const inputValue = value.trim().toLowerCase()\n  const inputLength = inputValue.length\n  let count = 0\n  return inputLength === 0\n    ? []\n    : allPersonaSuggestions.filter(suggestion => {\n      const keep = count < 5 && suggestion.toLowerCase().slice(0, inputLength) === inputValue\n      if (keep) {\n        count += 1\n      }\n      return keep\n    })\n}\n\nexport interface OwnProps {\n  classes?: any\n  personas: Array<PersonaType>\n  profile: Profile\n  selectedPersona: PersonaType\n  field: ProfileField,\n  handleMappingChange: any,\n  handlePersonaAutoSelect: any\n  mapSaved: boolean\n}\n\nexport interface StateProps {\n  newPersona: PersonaType\n  newField: PersonaFieldType\n  conflict: boolean\n}\n\nexport interface State {\n  expansionPanelOpen: boolean\n  mappedPersona: PersonaType\n  mappedField: string\n  suggestions: Array<string>\n  personaAutovalue: string\n  fieldAutovalue: string\n  selectedPersona: PersonaType\n}\n\nexport type Props = OwnProps & StateProps\n\nclass FieldMapper extends React.Component<Props, State> {\n  constructor (props: Props) {\n    super(props)\n    this.state = {\n      suggestions: [],\n      personaAutovalue: props.selectedPersona.name,\n      selectedPersona: props.selectedPersona,\n      fieldAutovalue: '',\n      expansionPanelOpen: false,\n      mappedPersona: props.selectedPersona,\n      mappedField: props.field.name\n    }\n  }\n\n  static getDerivedStateFromProps (nextProps: Props, prevState: State) {\n    if (nextProps.selectedPersona !== prevState.selectedPersona) {\n      if (nextProps.field.mapping !== undefined) {\n        let mapping = nextProps.field.mapping\n        let filteredField = nextProps.selectedPersona.fields.filter(function (field) {\n          return field.name === mapping.personaFieldName\n        })\n        if (filteredField.length > 0) {\n          mapping.personaAddress = nextProps.selectedPersona.hash\n        }\n        let filteredPersonas = nextProps.personas.filter(function (persona: PersonaType) {\n          return mapping.personaAddress === persona.hash\n        })\n        if (filteredPersonas.length !== 0) {\n          return {\n            selectedPersona: nextProps.selectedPersona,\n            mappedPersona: filteredPersonas[0],\n            mappedField: nextProps.field.mapping.personaFieldName,\n            personaAutovalue: filteredPersonas[0].name\n          }\n        } else {\n          return {\n            selectedPersona: nextProps.selectedPersona,\n            mappedPersona: nextProps.personas[0],\n            personaAutovalue: nextProps.personas[0].name\n          }\n        }\n      } else {\n        return {\n          selectedPersona: nextProps.selectedPersona,\n          personaAutovalue: nextProps.selectedPersona.name\n        }\n      }\n    }\n    return null\n  }\n\n  componentDidMount () {\n    if (this.props.field.mapping !== undefined) {\n      this.setPersonaAndFieldName(this.props.field)\n    }\n    allPersonaSuggestions = []\n    this.props.personas.map((persona: PersonaType) => (\n      allPersonaSuggestions.push(persona.name)\n    ))\n  }\n\n  handleMappingChange = (updatedField: ProfileField, value: string) => {\n    this.props.handleMappingChange(updatedField, value)\n    this.setPersonaAndFieldName(updatedField)\n  }\n\n  public setPersonaAndFieldName (field: ProfileField) {\n    if (field.mapping !== undefined) {\n      let mapping = field.mapping\n      let filteredPersonas = this.props.personas.filter(function (persona: PersonaType) {\n        return mapping.personaAddress === persona.hash\n      })\n      if (filteredPersonas.length !== 0) {\n        this.setState({\n          mappedPersona: filteredPersonas[0],\n          mappedField: field.mapping.personaFieldName,\n          personaAutovalue: filteredPersonas[0].name\n        })\n      } else {\n        this.setState({\n          mappedPersona: this.props.personas[0],\n          personaAutovalue: this.props.personas[0].name\n        })\n      }\n    } else {\n      this.setState({\n        personaAutovalue: this.props.selectedPersona.name\n      })\n    }\n  }\n\n  public renderInput = (inputProps: any) => {\n    const { classes, ref, ...other } = inputProps\n\n    return (\n      <div>\n        <TextField\n          fullWidth={true}\n          id='personaAutoText'\n          name='personaAutoText'\n          label='Persona Name'\n          InputProps={{\n            classes: {\n              input: classes.textfield\n            },\n            disableUnderline: false,\n            inputRef: ref,\n            ...other\n          }}\n        />\n      </div>\n    )\n  }\n  public handleSuggestionsFetchRequested = ({ value }: { value: any }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    })\n  }\n\n  public handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    })\n  }\n\n  public handlePersonaAutoChange = (event: any, newVal: any) => {\n    let newValue = newVal.newValue\n    this.setState({\n      personaAutovalue: newValue\n    })\n  }\n  public handlePersonaAutoSelect = () => {\n    // this.props.handlePersonaAutoSelect(this.state.personaAutovalue)\n  }\n  render () {\n    const { classes, field, personas, profile } = this.props\n  \treturn (\n      <div className={classes.root}>\n        <ExpansionPanel expanded={this.state.expansionPanelOpen} style={{ boxShadow: 'none' }}>\n          <ExpansionPanelSummary expandIcon={<Person name='expandPersonaDetails' color={this.props.mapSaved ? 'primary' : 'secondary'} onClick={() => { this.setState({ expansionPanelOpen: !this.state.expansionPanelOpen }) }}/>}>\n            <AutoCompleteProfileField\n              personas={personas}\n              selectedPersona={this.state.selectedPersona}\n              profile={profile}\n              field={field}\n              handleMappingChange={this.handleMappingChange}\n            />\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Autosuggest\n              id='selectedPersonaValue'\n              theme={{\n                container: classes.container,\n                suggestion: classes.suggestion,\n                suggestionsContainerOpen: classes.suggestionsContainerOpen,\n                suggestionsList: classes.suggestionsList\n              }}\n              renderInputComponent={this.renderInput}\n              suggestions={this.state.suggestions}\n              onSuggestionsFetchRequested={this.handleSuggestionsFetchRequested}\n              onSuggestionsClearRequested={this.handleSuggestionsClearRequested}\n              renderSuggestionsContainer={renderSuggestionsContainer}\n              getSuggestionValue={getSuggestionValue}\n              renderSuggestion={renderSuggestion}\n              inputProps={{\n                classes,\n                onBlur: this.handlePersonaAutoSelect,\n                onChange: this.handlePersonaAutoChange,\n                value: this.state.personaAutovalue\n              }}\n            />\n            <TextField className={classes.field} name='field' label='Field' value={this.state.mappedField}/>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n  \t)\n  }\n}\n\nexport default withRoot(withStyles(styles)(FieldMapper))\n","import * as React from 'react'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport withRoot from '../../../../withRoot'\nimport { Profile as ProfileType, ProfileField } from '../../types/profile'\nimport { Persona as PersonaType } from '../../types/persona'\nimport Button from '@material-ui/core/Button'\nimport { GetProfiles, GetPersonas } from '../../actions'\nimport FieldMapper from './fieldMapper'\nimport Typography from '@material-ui/core/Typography'\nimport {\n  TextField,\n  MenuItem,\n  Grid\n} from '@material-ui/core/'\n\nconst styles = ({ spacing }: Theme) => createStyles({\n  container: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  button: {\n    marginRight: spacing(1),\n    marginTop: spacing(1),\n    marginLeft: 25,\n    marginBottom: 25\n  },\n  selectContainer: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 25,\n    paddingRight: 25,\n    width: '100%',\n    marginBottom: 25\n  },\n  select: {\n    width: '100%'\n  },\n  paper: {\n    padding: spacing(1)\n  }\n})\n\nexport interface RouterProps extends RouteComponentProps<{hash: string, returnUrl: string}> {}\n\nexport interface OwnProps {\n  classes?: any,\n  onSubmit?: () => void\n}\n\nexport interface DispatchProps {\n  save: (profile: ProfileType, personas: Array<PersonaType>) => Promise<any>\n  getProfiles: typeof GetProfiles.sig\n  getPersonas: typeof GetPersonas.sig\n  setCurrentPersona: (newCurrentPersona: PersonaType) => void\n}\n\nexport interface StateProps {\n  personas: Array<PersonaType>\n  selectedPersona: PersonaType\n  profile: ProfileType,\n  returnUrl: string\n}\n\nexport interface State {\n  profile: ProfileType\n  personas: Array<PersonaType>\n}\n\nexport type Props = OwnProps & DispatchProps & StateProps\n\nclass Profile extends React.Component<Props & RouterProps, State> {\n  constructor (props: Props & RouterProps) {\n    super(props)\n    this.state = {\n      profile: props.profile,\n      personas: props.personas\n    }\n  }\n\n  componentDidMount () {\n    this.props.getPersonas({})\n      .then(() => this.props.getProfiles({}))\n      .catch((err) => console.log(JSON.stringify(err)))\n  }\n\n  static getDerivedStateFromProps (nextProps: Props & RouterProps, prevState: State) {\n    if (!prevState.profile) {\n      return {\n        profile: nextProps.profile\n      }\n    } else {\n      return null\n    }\n  }\n\n  handleMappingChange = (updatedField: ProfileField, value: string) => {\n    // To be able to save new Persona fields we add new fields to the existing personas.\n    console.log('updatedField')\n    if (updatedField.mapping !== undefined) {\n      let personas = this.props.personas\n      let personaAddress = updatedField.mapping.personaAddress\n      let personaFieldName = updatedField.mapping.personaFieldName\n      let selectedPersonas = personas.filter(function (persona: PersonaType) {\n        return persona.hash === personaAddress\n      })\n      if (selectedPersonas.length === 1) {\n        let selectedPersonaFields = selectedPersonas[0].fields.filter(function (field) {\n          return field.name === personaFieldName\n        })\n        if (selectedPersonaFields.length === 0) {\n          selectedPersonas[0].fields.push({ name: personaFieldName, data: value })\n          this.setState({\n            personas: personas\n          })\n        }\n      }\n    }\n\n    this.state.profile.fields.filter(function (field) {\n      return field.name === updatedField.name\n    })[0] = updatedField\n\n    this.setState({\n      profile: this.state.profile\n    })\n  }\n\n  handleSaveProfile = () => {\n    this.props.save(this.state.profile, this.props.personas)\n      .then(this.props.getProfiles)\n      .then(() => {\n        if (this.props.returnUrl === '/profiles') {\n          this.props.history.push(this.props.returnUrl)\n        } else {\n          window.location.replace(decodeURIComponent(this.props.returnUrl))\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  public handleChangeSelectedPersona = (event: any) => {\n    let personaAddress = event.target.value\n    let selectedPersona = this.props.personas.filter(function (persona: PersonaType) {\n      return persona.hash === personaAddress\n    })[0]\n    this.props.setCurrentPersona(selectedPersona)\n  }\n\n  render () {\n    if (!this.props.selectedPersona || !this.props.profile) {\n      return (\n        <Grid container={true} justify='center'>\n          <CircularProgress/>\n        </Grid>\n      )\n    }\n\n    const { profile, classes } = this.props\n\n    return (\n      <div className={classes.container}>\n        <Paper className={classes.paper}>\n          <Typography variant='h4' component='h2'>\n            Profile for {profile.name}\n          </Typography>\n          <Typography component='p'>\n              Welcome to the Agent Centric Web where you are in control of your personal data.\n          </Typography>\n          <Paper className={classes.selectContainer}>\n            <TextField name='PersonasSelect' className={classes.select} select={true} value={this.props.selectedPersona.hash} onChange={this.handleChangeSelectedPersona} label='Selected Persona'>\n            {this.props.personas.map((persona) => {\n              return (\n                <MenuItem key={persona.hash} value={persona.hash} >\n                  {persona.name}\n                </MenuItem>\n              )\n            })}\n            </TextField>\n          </Paper>\n          <Paper className={classes.form}>\n            {this.state.profile.fields.map((field, i) => {\n              return (\n                <FieldMapper\n                  key={i}\n                  personas={this.props.personas}\n                  selectedPersona={this.props.selectedPersona} // make sure the currentPersona is at the top\n                  profile={profile}\n                  field={field}\n                  mapSaved={this.props.profile.fields[i].mapping}\n                  handleMappingChange={this.handleMappingChange}\n                />\n              )\n            })}\n            <Button id='Agree' onClick={this.handleSaveProfile} color='primary'>\n              Save Profile\n            </Button>\n          </Paper>\n        </Paper>\n      </div>\n    )\n  }\n}\n\nexport { Profile as ProfileBase }\nexport default withRoot(withStyles(styles)(withRouter(Profile)))\n","import { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { Profile as ProfileType, ProfileField } from '../types/profile'\nimport { Persona as PersonaType, PersonaField } from '../types/persona'\nimport Profile, { Props, RouterProps, StateProps, DispatchProps } from '../components/profile/profile'\n\nimport {\n  CreateMapping,\n  GetProfiles,\n  GetPersonas,\n  AddField,\n  SetCurrentPersona\n} from '../actions'\n\nconst mapStateToProps = (state: any, ownProps: Props & RouterProps): StateProps => {\n\n  // use the route to filter profiles to get the selected profile\n  // will return undefined if non-existent\n\n  let profile: ProfileType\n  let returnUrl: string = '/profiles'\n  // get the current profile from the url if possible\n  if (ownProps.match) {\n    const hash = ownProps.match.params.hash\n    profile = state.personasProfiles.profile.profiles.filter((profile: ProfileType) => {\n      console.log(profile.sourceDna === hash)\n      return profile.sourceDna === hash\n    })[0]\n    if (ownProps.match.params.returnUrl) {\n      returnUrl = ownProps.match.params.returnUrl\n    } else {\n      returnUrl = '/profiles'\n    }\n    console.log('returnUrl ' + returnUrl)\n  } else { // otherwise use the current profile from the state\n    profile = state.personasProfiles.profile.currentProfile\n  }\n\n  return {\n    returnUrl: returnUrl,\n    personas: state.personasProfiles.profile.personas,\n    selectedPersona: state.personasProfiles.profile.currentPersona,\n    profile: profile\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    getProfiles: () => dispatch(GetProfiles.create({})),\n    getPersonas: () => dispatch(GetPersonas.create({})),\n    setCurrentPersona: (newCurrentPersona: PersonaType) => { dispatch(SetCurrentPersona(newCurrentPersona)) },\n    save: (profile: ProfileType, personas: Array<PersonaType>) => {\n      // call createMapping on all of the fields with a mapping\n      console.log('About to map ', profile)\n\n      return Promise.all(\n        profile.fields.filter(field => field.mapping).map((field: ProfileField) => {\n\n          let actions = []\n\n          console.log('add the persona field for ', field.displayName)\n          if (field.mapping !== undefined) {\n            let personaAddress = field.mapping.personaAddress\n            let personaFieldName = field.mapping.personaFieldName\n            let selectedPersonas = personas.filter(function (persona: PersonaType) {\n              return persona.hash === personaAddress\n            })\n            if (selectedPersonas.length === 1) {\n              let selectedPersonaFields = selectedPersonas[0].fields.filter(function (field) {\n                return field.name === personaFieldName\n              })\n              if (selectedPersonaFields.length === 1) {\n                let personaField: PersonaField = selectedPersonaFields[0]\n                actions.push(dispatch(AddField.create({ persona_address: personaAddress, field: personaField })))\n              }\n            }\n          }\n          console.log('creating map for ', field)\n          actions.push(dispatch(CreateMapping.create({mapping: {\n            ...field.mapping!,\n            retrieverDna: profile.sourceDna,\n            profileFieldName: field.name\n          }})))\n\n          return Promise.all(actions)\n        })\n      )\n\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Profile)\n","import * as React from 'react'\nimport { Route } from 'react-router-dom'\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport withRoot from '../../../../withRoot'\nimport Typography from '@material-ui/core/Typography'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\nimport { GetProfiles } from '../../actions'\nimport Paper from '@material-ui/core/Paper'\n\n// import Avatar from '@material-ui/core/Avatar'\n// import Markdown from 'react-markdown'\n\nimport { Profile } from '../../types/profile'\n\nconst styles = ({ spacing }: Theme) => createStyles({\n  root: {\n    textAlign: 'left',\n    paddingTop: spacing(1)\n  },\n  paper: {\n    padding: spacing(1)\n  }\n})\n\nexport interface OwnProps {\n  classes?: any,\n}\n\nexport interface StateProps {\n  profiles: Array<Profile>\n}\n\nexport interface DispatchProps {\n  getProfiles: typeof GetProfiles.sig\n}\n\nexport type Props = OwnProps & StateProps & DispatchProps\n\nclass Profiles extends React.Component<Props, {}> {\n\n  componentDidMount () {\n\n    this.props.getProfiles({})\n    .catch(reason => { console.log(JSON.stringify(reason)) })\n  }\n\n  render () {\n    const { classes, profiles } = this.props\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <Typography variant='h4'>\n            Profiles\n          </Typography>\n          <Typography variant='body1' gutterBottom={true}>\n            Each time an app asks for Profile Information it gets stored here so you can see exactly what your information is being used for.\n          </Typography>\n          <List>\n            {\n              profiles.map((profile: Profile, index: number) => (\n                // tslint:disable-next-line jsx-no-lambda\n                <Route\n                  key={index}\n                  render={({ history }) => (\n                    <ListItem button={true} onClick={() => { history.push(`/profile/${profile.sourceDna}`) }}>\n                      <ListItemText primary={profile.name} />\n                    </ListItem>\n                  )}\n                />\n              ))\n            }\n          </List>\n        </Paper>\n      </div>\n    )\n  }\n}\n\nexport default withRoot(withStyles(styles)(Profiles))\n","\nimport { connect } from 'react-redux'\nimport Personas, { OwnProps, StateProps, DispatchProps } from '../components/profile/profiles'\nimport { Dispatch } from 'redux'\n\nimport {\n  GetProfiles\n} from '../actions'\n\nconst mapStateToProps = (state: any): StateProps => {\n  return {\n    profiles: state.personasProfiles.profile.profiles\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    getProfiles: () => dispatch(GetProfiles.create({}))\n  }\n}\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(Personas)\n","import * as React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardActions from '@material-ui/core/CardActions'\nimport { DeleteForever, Autorenew } from '@material-ui/icons'\nimport { createStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport withRoot from '../../../withRoot'\n\nconst styles = ({ palette }: Theme) => createStyles({\n  card: {\n    minWidth: 300\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%'\n  },\n  actions: {\n    display: 'flex'\n  },\n  title: {\n    fontSize: 8,\n    marginTop: 10\n  }\n})\n\nfunction DeepKeyDetail (props: any) {\n  const { currentKey, classes, keyType, address, updateKey } = props\n\n  // const currentKeyProps = revocationRuleSetProp || authorizerKeySetProp || agentKeyProps\n  const displayProp = (text: string) => {\n    const transformedText = text.replace(/([A-Z])/g, ' $1').trim()\n    const capFirstLetter = transformedText[0].toUpperCase()\n    const newString = capFirstLetter + transformedText.substr(1)\n    return newString\n  }\n\n  const makeZomeCall = (action: string, params?: any) => {\n    const actionCall = props[action]\n    actionCall(params)\n      .catch((reason: any) => { console.log('HC ZOMECALL ERROR = action, result : ', action, JSON.stringify(reason)) })\n  }\n\n  const updateCurrentKey = () => {\n    if (keyType === 'revocationKey') {\n      makeZomeCall('updateRevocationRules', { revocationKey: address, signedOldRevocationKey: currentKey.priorRevocationSelfSig })\n    } else if (keyType === 'authorizationKey') {\n      makeZomeCall('setAuthorizer', { authorizationKeyPath: 1, signedAuthKey: 'how_do_we_determine_this????' })  // TODO: Review how to DETERMINE THIS....,\n    } else {\n      updateKey({\n        oldKey: address,\n        signedOldKey: 'IS_THIS_THE_REV_KEY_Signature_????',\n        context: currentKey.context\n      })\n      makeZomeCall('updateKey', { oldKey: address, signedOldKey: 'IS_THIS_THE_REV_KEY_Signature_????', context: currentKey.context })\n    }\n  }\n\n  const deleteCurrentKey = () => {\n    if (keyType === 'revocationKey') {\n      console.log('Trying to delete a revocation key. This is not possible. Please update/replace key instead.')\n    } else if (keyType === 'authorizationKey') {\n      console.log('Trying to delete a authorization key. This is not possible. Please update/replace key instead.')\n    } else {\n      makeZomeCall('deleteKey', { oldKey: address, signedOldKey: 'IS_THIS_THE_REV_KEY_Signature_????' })\n    }\n  }\n\n  return (\n\t\t<Card className={classes.card}>\n\t\t\t<CardHeader\n        title={`${displayProp(keyType)}`}\n        titleTypographyProps={{ variant: 'h6' }}\n        subheader={`${address}`}\n        subheaderTypographyProps={{ variant: 'body2' }}\n\t\t\t/>\n\t\t\t<hr style={{ margin: '5px auto', width: '95%' }}/>\n\t\t\t<CardActions className={classes.actions}>\n\t\t\t\t<Button size='small' color='primary' onClick={(updateCurrentKey)}>\n\t\t\t\t\t<Autorenew/>\n\t\t\t\t\tReplace\n\t\t\t\t</Button>\n\t\t\t\t<Button size='small' color='primary' onClick={deleteCurrentKey}>\n\t\t\t\t\t<DeleteForever/>\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t</CardActions>\n\t\t</Card>\n  )\n}\n\nexport default withRoot(withStyles(styles)(DeepKeyDetail))\n","import * as React from 'react'\nimport { Route } from 'react-router-dom'\nimport { createStyles, withStyles, Theme } from '@material-ui/core/styles';\nimport withRoot from '../../../withRoot'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\nimport { IsInitialized, GetRevocationRules, GetAuthorizer, GetAllKeys } from '../../deepkey/actions'\nimport { Key, KeyParams, Authorizer, Rule } from '../types/deepKey'\nimport DeepKeyDetail from './deepKeyDetail'\n\nconst styles = ({ spacing }: Theme) => createStyles({\n  root: {\n    textAlign: 'left',\n    paddingTop: spacing(1)\n  },\n  paper: {\n    padding: spacing(1)\n  }\n})\n\nexport interface OwnProps {\n  classes?: any,\n  address?: string,\n  keyType?: string\n}\n\nexport interface StateProps {\n  isInitialized: boolean,\n  revocationRuleSet: Rule,\n  authorizerKeySet: Authorizer,\n  allKeys: Array<Key>\n}\n\nexport interface DispatchProps {\n  fetchIsInitialized: typeof IsInitialized.sig,\n  fetchRevocationRules: typeof GetRevocationRules.sig,\n  fetchAuthorizer: typeof GetAuthorizer.sig,\n  fetchAllKeys: typeof GetAllKeys.sig,\n  updateKey: (key: KeyParams) => Promise<string>,\n  deleteKey: (key: KeyParams) => Promise<string>\n}\n\nexport type Props = OwnProps & StateProps & DispatchProps\n\nclass DeepKeyOverview extends React.Component<Props, {}> {\n  // makeZomeCall = (action: string) => {\n  //   const actionCall = this.props[action]\n  //   // console.log('actionCall : ', actionCall)\n  //   actionCall()\n  //     .catch((reason: any) => { console.log('HC ZOMECALL ERROR: ', JSON.stringify(reason)) })\n  // }\n\n  // componentDidMount () {\n  //   this.makeZomeCall('fetchRevocationRules')\n  //   this.makeZomeCall('fetchAuthorizer')\n  //   this.makeZomeCall('fetchIsInitialized')\n  //   this.makeZomeCall('fetchAllKeys')\n  //\n  //   console.log('this.props', this.props)\n  // }\n\n  render () {\n    const { classes, revocationRuleSet, isInitialized, allKeys } = this.props\n\n    return (\n      <div className={classes.root}>\n        <Paper className={classes.paper}>\n          <Typography variant='h4'>\n            DeepKey\n          </Typography>\n          <Typography variant='body1' gutterBottom={true}>\n            All DeepKey Information is stored here, so you can keep track of your device seeds/keys and know exactly which devices are secured.\n          </Typography>\n\n          <hr/>\n          {isInitialized ?\n            <Typography variant='subtitle1' gutterBottom={true}>\n              DeepKey is Initialized\n            </Typography>\n\n          : isInitialized && revocationRuleSet ?\n            <div>\n              <Typography variant='subtitle1' gutterBottom={true}>\n                Available Keys\n              </Typography>\n\n              <DeepKeyDetail address={revocationRuleSet.revocationKey} keyType={'revocationKey'}/>\n            </div>\n\n            : isInitialized && revocationRuleSet && allKeys ?\n              <List>\n                {\n                  allKeys.map((key: Key, index: number) => (\n                    // tslint:disable-next-line jsx-no-lambda\n                    <Route\n                      key={`${index}-deepkey`}\n                      render={({ history }) => (\n                        <ListItem key={index} button={true} onClick={() => { history.push(`/deepkey/${key.keyType}`) }}>\n                          <ListItemText primary={key.keyType} />\n                          <DeepKeyDetail address={key.address} keyType={key.keyType}/>\n                        </ListItem>\n                      )}\n                    />\n                  ))\n                }\n              </List>\n\n            : isInitialized && revocationRuleSet && !allKeys ?\n            <Typography variant='subtitle1' gutterBottom={true}>\n              No Keys Currently Available\n            </Typography>\n\n            :\n            <main>\n              <Typography variant='subtitle1' gutterBottom={true}>\n                Warning: Your DeepKey is Not Initialized.\n              </Typography>\n              <Typography variant='subtitle2' gutterBottom={true}>\n                Please ensure your conductor is correctly configured with DeepKey and running.\n              </Typography>\n            </main>\n          }\n        </Paper>\n      </div>\n    )\n  }\n}\n\nexport default withRoot(withStyles(styles)(DeepKeyOverview))\n","import { createHolochainZomeCallAsyncAction } from '@holochain/hc-redux-middleware'\n// import { connect } from '@holochain/hc-web-client'\n// import { get } from 'lodash/fp'\nimport { Hash, Address, Signature, Rule, Authorizer, KeyMeta } from './types/deepKey'\n\n/*----------  DeepKey Actions  ----------*/\n\nexport const IsInitialized = createHolochainZomeCallAsyncAction<{}, boolean>(`dpki_happ`, 'dpki', 'is_initialized')\n\nexport const GetRevocationRules = createHolochainZomeCallAsyncAction<{}, Array<{address: Address, entry: Rule}>>(`dpki_happ`, 'dpki', 'get_rules')\n\nexport const UpdateRevocationRules = createHolochainZomeCallAsyncAction<{revocationKey: Hash, signedOldRevocationKey: Signature}, Address>(`dpki_happ`, 'dpki', 'update_rules')\n\nexport const SetAuthorizer = createHolochainZomeCallAsyncAction<{authorizationKeyPath: number, signedAuthKey: Signature}, Address>(`dpki_happ`, 'dpki', 'set_authorizor')\n\nexport const GetAuthorizer = createHolochainZomeCallAsyncAction<{}, Authorizer>(`dpki_happ`, 'dpki', 'get_authorizor')\n\nexport const GetAllKeys = createHolochainZomeCallAsyncAction<{}, Array<KeyMeta>>(`dpki_happ`, 'dpki', 'get_all_keys')\n\nexport const UpdateKey = createHolochainZomeCallAsyncAction<{oldKey: Hash, signedOldKey: Signature, context?: String}, Address>(`dpki_happ`, 'dpki', 'update_key')\n\nexport const DeleteKey = createHolochainZomeCallAsyncAction<{oldKey: Hash, signedOldKey: Signature}, Address>(`dpki_happ`, 'dpki', 'delete_key')\n\n/*----------  Conductor ADMIN Actions  ----------*/\n\nexport const CreateAgent = createHolochainZomeCallAsyncAction<{}, Address>('admin', 'agent', 'add')\n\nexport const GetAgentList = createHolochainZomeCallAsyncAction<{}, Array<any>>('admin', 'agent', 'list')\n\n// const createAsyncConductorAdminAction = (adminCommand:string, args:any) => {\n//   return new Promise((resolve, reject) => {\n//     let result:any\n//     connect().then(async({call, close}) => {\n//       result = await call(`admin/agent/${adminCommand}`)(args)\n//       const error = get('Err', JSON.parse(result)) || get('SerializationError ', JSON.parse(result))\n\n//       console.log(\"!! MADE ADMIN CONDUCTOR CALL. Here is the parsed result : \", JSON.parse(result))\n\n//       if (error) throw (error)\n//       else return JSON.parse(result)\n//     })\n//     resolve(result)\n//   })\n// }\n\n// CREATE NEW AGENT >> ADMIN CONDUCTOR call >>> admin/agent/add\n// export const CreateAgent = (args:any) => createAsyncConductorAdminAction('add', args)\n\n// // LIST ALL AGENTS>> ADMIN CONDUCOR call >>> admin/agent/list`\n// export const ListAgent = () => createAsyncConductorAdminAction('list', {})\n","import { connect } from 'react-redux'\nimport { Dispatch } from 'redux'\nimport { KeyParams, RevParams, AuthParams } from '../types/deepKey' // Agent,\nimport DeepKeyOverview, { StateProps, DispatchProps } from '../components/deepKeyOverview'\nimport {\n\tIsInitialized,\n  GetRevocationRules,\n  UpdateRevocationRules,\n  SetAuthorizer,\n\tGetAuthorizer,\n\tGetAllKeys,\n\tUpdateKey,\n  DeleteKey // ,\n  // CreateAgent,\n} from '../../deepkey/actions'\n\n// const mapStateToProps = ({ isInitialized, revocationKey, allKeys }: { isInitialized:boolean, revocationKey:string, allKeys:any }): StateProps => ({  isInitialized, revocationKey, allKeys })\nconst mapStateToProps = (state: any): StateProps => {\n  return {\n    isInitialized: state.deepKey.isInitialized,\n    revocationRuleSet: state.deepKey.revocationRuleSet,\n    authorizerKeySet: state.deepKey.authorizerKeySet,\n    allKeys: state.deepKey.deepkey.allKeys\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  // DeepKey DNA Calls:\n  fetchIsInitialized: () => dispatch(IsInitialized.create({})),\n  fetchRevocationRules: () => dispatch(GetRevocationRules.create({})),\n  // updateRevocationRules: (args: RevParams) => dispatch(UpdateRevocationRules.create(args)),\n  // setAuthorizer: (args: AuthParams) => dispatch(SetAuthorizer.create(args)),\n  fetchAuthorizer: () => dispatch(GetAuthorizer.create({})),\n  fetchAllKeys: () => dispatch(GetAllKeys.create({})),\n  updateKey: (args: KeyParams) => dispatch(UpdateKey.create(args)),\n  deleteKey: (args: KeyParams) => dispatch(DeleteKey.create(args))\n  // Admin Call:\n  // createAgent; args = {id, name}\n  // eg: {id :\"test_agent1\", name : \"Agent 1\"}\n\t// createAgent:(args: Agent) => dispatch(CreateAgent(args))\n})\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(DeepKeyOverview)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Route } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Drawer from '@material-ui/core/Drawer'\nimport Hidden from '@material-ui/core/Hidden'\nimport IconButton from '@material-ui/core/IconButton'\nimport PersonIcon from '@material-ui/icons/Person'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport LoginContainer from './hApps/login/containers/loginContainer'\nimport PersonasContainer from './hApps/personas-profiles/containers/personasContainer'\nimport PersonaContainer from './hApps/personas-profiles/containers/personaContainer'\nimport ProfileContainer from './hApps/personas-profiles/containers/profileContainer'\nimport ProfilesContainer from './hApps/personas-profiles/containers/profilesContainer'\nimport DeepKeyOverviewContainer from './hApps/deepkey/containers/deepKeyContainer'\n\nconst drawerWidth = 240\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    marginLeft: drawerWidth,\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`\n    }\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none'\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  }\n}))\n\nfunction Navigation(props) {\n  const { container } = props\n  const classes = useStyles()\n  const theme = useTheme()\n  const [mobileOpen, setMobileOpen] = React.useState(false)\n\n  function handleDrawerToggle() {\n    setMobileOpen(!mobileOpen)\n  }\n\n  function handleClickListItem(history, path) {\n    history.push(path)\n    setMobileOpen(!mobileOpen)\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <List>\n          <Route render={({ history}) => (\n            <div>\n              <ListItem button onClick={() => { handleClickListItem(history,'/deepkey') }}>\n                <ListItemIcon>\n                  <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary='Deep Key' />\n              </ListItem>\n              <ListItem button onClick={() => { handleClickListItem(history, '/personas') }}>\n                <ListItemIcon>\n                  <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary='Personas' />\n              </ListItem>\n              <ListItem button onClick={() => { handleClickListItem(history,'/profiles') }}>\n                <ListItemIcon>\n                  <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary='Profiles' />\n              </ListItem>\n              <ListItem button onClick={() => { handleClickListItem(history,'/login') }}>\n                <ListItemIcon>\n                  <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary='Login' />\n              </ListItem>\n            </div>\n          )} />\n      </List>\n    </div>\n  )\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Holochain Identity Manager\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Route exact path='/login' title='Holo' render={props =>\n          <div>\n            <LoginContainer {...props} />\n          </div>\n        } />\n        <Route path='/personas' component={PersonasContainer} />\n        <Route path='/persona/:name' component={PersonaContainer} />\n        <Route path='/profiles' component={ProfilesContainer} />\n        <Route exact path='/profile/:hash' render={ props =>\n          <ProfileContainer {...props} />\n        } />\n        <Route exact path='/profile/:hash/:returnUrl' render={ props =>\n          <ProfileContainer {...props} />\n        } />\n        <Route path='/deepkey' component={DeepKeyOverviewContainer} />\n        <Route exact path='/' render={ props =>\n          <div>\n            <PersonasContainer {...props} />\n            <ProfilesContainer {...props} />\n            <DeepKeyOverviewContainer {...props} />\n          </div>\n        } />\n      </main>\n    </div>\n  )\n}\n\nNavigation.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element),\n}\n\nexport default Navigation\n","import * as React from 'react'\nimport { Provider } from 'react-redux'\nimport Navigation from './nav'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nconst Root = ({ store }: {store: any}) => (\n  <Provider store={store}>\n    <Router>\n      <Route path='/' component={Navigation} />\n    </Router>\n  </Provider>\n)\n\nexport default Root\n","import { ActionType, getType } from 'typesafe-actions'\nimport { combineReducers } from 'redux'\nimport * as loginActions from './actions'\n\nexport type LoginAction = ActionType<typeof loginActions>\n// readonly keyword causes compiler to error if one attempts to mutate the state\nexport type LoginState = {\n  readonly loggedIn: boolean,\n}\nexport type State = LoginState\nexport const initialState: State = {\n  loggedIn: false\n}\n\nexport function loginReducer (state: LoginState = initialState, action: LoginAction) {\n  switch (action.type) {\n    case getType(loginActions.Login.success):\n      console.log(action)\n      let isLoggedIn = action.payload\n      return {\n        ...state,\n        loggedIn: isLoggedIn\n      }\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({\n  login: loginReducer\n})\n","import { ActionType, getType } from 'typesafe-actions'\n\nimport { combineReducers } from 'redux'\n\nimport * as vaultActions from './actions'\n\nimport { Profile, ProfileField } from './types/profile'\nimport { Persona } from './types/persona'\n\nexport type VaultAction = ActionType<typeof vaultActions>\n\n// readonly keyword causes compiler to error if one attempts to mutate the state\nexport type VaultState = {\n\n  readonly profiles: Array<Profile>,\n  readonly currentProfile?: Profile,\n\n  readonly personas: Array<Persona>,\n  readonly currentPersona?: Persona\n}\n\nexport type State = VaultState\n\nexport const initialState: State = {\n  profiles: [],\n  currentProfile: undefined,\n\n  personas: [],\n  currentPersona: undefined\n}\n\nexport function vaultReducer (state: VaultState = initialState, action: VaultAction) {\n  switch (action.type) {\n    case getType(vaultActions.GetPersonas.success):\n      console.log(action)\n      let personas = action.payload.map((elem: any) => { return { ...elem.entry, hash: elem.address } })\n\n      let currentPersona = personas.filter((persona: Persona) => persona.name === 'Default')[0] || personas[0] || undefined\n\n      return {\n        ...state,\n        personas,\n        currentPersona\n      }\n    case getType(vaultActions.GetProfiles.success):\n      return {\n        ...state,\n        profiles: action.payload.map((profile: Profile) => {\n          const fields = profile.fields.map((field: ProfileField) => {\n            return { ...field, mapping: field.mapping ? field.mapping : undefined }\n          })\n          return { ...profile, fields }\n        })\n      }\n    case getType(vaultActions.SetCurrentPersona):\n      return {\n        ...state,\n        currentPersona: action.payload\n      }\n    case getType(vaultActions.SetCurrentProfile):\n      return {\n        ...state,\n        currentProfile: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({\n  profile: vaultReducer\n})\n","import { ActionType, getType } from 'typesafe-actions'\nimport { combineReducers } from 'redux'\nimport * as deepKeyAction from './actions'\n\nexport type DeepKeyAction = ActionType<typeof deepKeyAction>\n\n// readonly keyword causes compiler to error if one attempts to mutate the state\nexport type DeepKeyState = {\n  readonly isInitialized: false,\n  readonly revocationRuleSet: undefined,\n  readonly authorizerKeySet: undefined,\n  readonly allKeys: []\n}\n\nexport type State = DeepKeyState\n\nexport const initialState: State = {\n  isInitialized: false,\n  revocationRuleSet: undefined,\n  authorizerKeySet: undefined,\n  allKeys: []\n}\n\nexport function keyReducer (state: DeepKeyState = initialState, action: DeepKeyAction) {\n  switch (action.type) {\n    case getType(deepKeyAction.IsInitialized.success):\n      console.log('Is DeepKey initialized ?? : ', action.payload)\n      return {\n        ...state,\n        isInitialized: action.payload\n      }\n\n    case getType(deepKeyAction.GetRevocationRules.success):\n      console.log('get GetrevocationRuleSet : ', action.payload)\n      return {\n        ...state,\n        revocationRuleSet: action.payload[0].entry\n      }\n\n    case getType(deepKeyAction.GetAuthorizer.success):\n      console.log('get Authorizer : ', action.payload)\n      return {\n        ...state,\n        AuthorizerKeySet: action.payload[0].entry\n      }\n\n    case getType(deepKeyAction.GetAllKeys.success):\n      console.log('get all keys : ', action.payload)\n      return {\n        ...state,\n        allKeys: action.payload\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({\n  deepkey: keyReducer\n})\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux'\nimport { holochainMiddleware } from '@holochain/hc-redux-middleware'\nimport { connect } from '@holochain/hc-web-client'\nimport login from './hApps/login/reducer'\nimport personasProfiles from './hApps/personas-profiles/reducer'\nimport deepKey from './hApps/deepkey/reducer'\n\n\nconst REACT_APP_CHAT_WEBSOCKET_INTERFACE = process.env.REACT_APP_CHAT_WEBSOCKET_INTERFACE\nlet rootReducer = combineReducers({ login: login, personasProfiles: personasProfiles, deepKey: deepKey })\nlet middleware: Array<any>\nif (REACT_APP_CHAT_WEBSOCKET_INTERFACE) {\n  middleware = [holochainMiddleware(connect({ url: REACT_APP_CHAT_WEBSOCKET_INTERFACE }))]\n} else {\n  middleware = [holochainMiddleware(connect())]\n}\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nfunction CreateStore () {\n  return createStore(\n  \trootReducer,\n  \tcomposeEnhancers(\n      applyMiddleware(...middleware)\n    )\n  )\n}\n\nexport default CreateStore\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport Root from './root'\nimport CreateStore from './store'\n\nconst store = CreateStore()\n\nReactDOM.render(<Root store={store} />, document.querySelector('#root'))\n"],"sourceRoot":""}